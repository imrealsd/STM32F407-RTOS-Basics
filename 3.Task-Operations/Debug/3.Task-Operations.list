
3.Task-Operations.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f30  08004f30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040e4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004158  20004158  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017061  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f85  00000000  00000000  00037105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0003a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d53  00000000  00000000  0003c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132dd  00000000  00000000  0005ee8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a95  00000000  00000000  00072168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145bfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004af0  00000000  00000000  00145c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d90 	.word	0x08004d90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004d90 	.word	0x08004d90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	2000014c 	.word	0x2000014c

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	af00      	add	r7, sp, #0

  /* definition and creation of Task1 */
  osThreadDef(Task1, start_task1, osPriorityAboveNormal, 0, 128);
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_FREERTOS_Init+0x7c>)
 80005b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 f818 	bl	8002602 <osThreadCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_FREERTOS_Init+0x80>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, start_task2, osPriorityNormal, 0, 128);
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_FREERTOS_Init+0x84>)
 80005da:	f107 0420 	add.w	r4, r7, #32
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f805 	bl	8002602 <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <MX_FREERTOS_Init+0x88>)
 80005fc:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, start_task3, osPriorityBelowNormal, 0, 2048);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_FREERTOS_Init+0x8c>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task3), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fff4 	bl	8002602 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <MX_FREERTOS_Init+0x88>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	3758      	adds	r7, #88	; 0x58
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	08004dc0 	.word	0x08004dc0
 800062c:	200040ac 	.word	0x200040ac
 8000630:	08004ddc 	.word	0x08004ddc
 8000634:	200040b4 	.word	0x200040b4
 8000638:	08004df8 	.word	0x08004df8

0800063c <start_task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_task1 */
void start_task1(void const * argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  char *msg = "Hello from Task1\r\n";
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <start_task1+0x2c>)
 8000646:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <start_task1+0x30>)
 8000658:	f001 fcd9 	bl	800200e <HAL_UART_Transmit>
    osDelay(500);
 800065c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000660:	f002 f81b 	bl	800269a <osDelay>
	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8000664:	e7f0      	b.n	8000648 <start_task1+0xc>
 8000666:	bf00      	nop
 8000668:	08004e14 	.word	0x08004e14
 800066c:	20004100 	.word	0x20004100

08000670 <start_task2>:
* @brief Function implementing the Task2 thread.
* @param argument: Not used
* @retval None
*/
void start_task2(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	  int count = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	  char *msg = "Hello from Task2\r\n";
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <start_task2+0x70>)
 800067e:	60bb      	str	r3, [r7, #8]


	  for(;;)
	  {
		count++;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8000686:	68b8      	ldr	r0, [r7, #8]
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <start_task2+0x74>)
 8000696:	f001 fcba 	bl	800200e <HAL_UART_Transmit>
	    osDelay(500);
 800069a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069e:	f001 fffc 	bl	800269a <osDelay>

	    if (count == 5) {
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b05      	cmp	r3, #5
 80006a6:	d10a      	bne.n	80006be <start_task2+0x4e>

	    	HAL_UART_Transmit(&huart1, (uint8_t *) "suspending Task1\r\n", 20, 100);
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2214      	movs	r2, #20
 80006ac:	490e      	ldr	r1, [pc, #56]	; (80006e8 <start_task2+0x78>)
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <start_task2+0x74>)
 80006b0:	f001 fcad 	bl	800200e <HAL_UART_Transmit>
	    	osThreadSuspend(Task1Handle);
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <start_task2+0x7c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f802 	bl	80026c2 <osThreadSuspend>
	    }

	    if (count == 10) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d1dd      	bne.n	8000680 <start_task2+0x10>
	    	HAL_UART_Transmit(&huart1, (uint8_t *) "resuming Task1\r\n", 20, 100);
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	2214      	movs	r2, #20
 80006c8:	4909      	ldr	r1, [pc, #36]	; (80006f0 <start_task2+0x80>)
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <start_task2+0x74>)
 80006cc:	f001 fc9f 	bl	800200e <HAL_UART_Transmit>
	    	osThreadResume(Task1Handle);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <start_task2+0x7c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f801 	bl	80026dc <osThreadResume>
	    	count = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
		count++;
 80006de:	e7cf      	b.n	8000680 <start_task2+0x10>
 80006e0:	08004e28 	.word	0x08004e28
 80006e4:	20004100 	.word	0x20004100
 80006e8:	08004e3c 	.word	0x08004e3c
 80006ec:	200040ac 	.word	0x200040ac
 80006f0:	08004e50 	.word	0x08004e50

080006f4 <start_task3>:
	    }
	  }
}

void start_task3(void const * argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	6018      	str	r0, [r3, #0]
  uint8_t thread_list [1024];

  for(;;)
  {
	osThreadList(thread_list);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f80b 	bl	8002720 <osThreadList>
	HAL_UART_Transmit(&huart1, (uint8_t *) thread_list, strlen((char*)thread_list), 100);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd5e 	bl	80001d0 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f107 0108 	add.w	r1, r7, #8
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <start_task3+0x3c>)
 8000720:	f001 fc75 	bl	800200e <HAL_UART_Transmit>
    osDelay(2000);
 8000724:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000728:	f001 ffb7 	bl	800269a <osDelay>
	osThreadList(thread_list);
 800072c:	e7e8      	b.n	8000700 <start_task3+0xc>
 800072e:	bf00      	nop
 8000730:	20004100 	.word	0x20004100

08000734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_GPIO_Init+0x30>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <MX_GPIO_Init+0x30>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_GPIO_Init+0x30>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fa1a 	bl	8000ba4 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f80c 	bl	800078c <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff ffde 	bl	8000734 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000778:	f000 f978 	bl	8000a6c <MX_USART1_UART_Init>
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800077c:	f7ff ff16 	bl	80005ac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000780:	f001 ff38 	bl	80025f4 <osKernelStart>

  return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fe60 	bl	8004460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000800:	23a8      	movs	r3, #168	; 0xa8
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fc87 	bl	8001124 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 f832 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2105      	movs	r1, #5
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fee8 	bl	8001614 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084a:	f000 f81b 	bl	8000884 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 f9b9 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010000 	.word	0x40010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_MspInit+0x54>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_MspInit+0x54>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 fa5f 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2019      	movs	r0, #25
 80008fe:	f000 fa4b 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000902:	2019      	movs	r0, #25
 8000904:	f000 fa64 	bl	8000dd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_InitTick+0xa4>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	4a1e      	ldr	r2, [pc, #120]	; (800098c <HAL_InitTick+0xa4>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6453      	str	r3, [r2, #68]	; 0x44
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_InitTick+0xa4>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 f840 	bl	80019b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000934:	f001 f82a 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8000938:	4603      	mov	r3, r0
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <HAL_InitTick+0xa8>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	0c9b      	lsrs	r3, r3, #18
 8000948:	3b01      	subs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_InitTick+0xac>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <HAL_InitTick+0xb0>)
 8000950:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_InitTick+0xac>)
 8000954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000958:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_InitTick+0xac>)
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_InitTick+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_InitTick+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_InitTick+0xac>)
 800096e:	f001 f853 	bl	8001a18 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <HAL_InitTick+0xac>)
 800097a:	f001 f8a7 	bl	8001acc <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3730      	adds	r7, #48	; 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	431bde83 	.word	0x431bde83
 8000994:	200040b8 	.word	0x200040b8
 8000998:	40010000 	.word	0x40010000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ce:	f001 f8ed 	bl	8001bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200040b8 	.word	0x200040b8

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f003 fcee 	bl	80043ec <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20020000 	.word	0x20020000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	2000034c 	.word	0x2000034c
 8000a44:	20004158 	.word	0x20004158

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART1_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	f001 fa66 	bl	8001f74 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f7ff fee9 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20004100 	.word	0x20004100
 8000abc:	40011000 	.word	0x40011000

08000ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <HAL_UART_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12c      	bne.n	8000b3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0x88>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_UART_MspInit+0x88>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_UART_MspInit+0x8c>)
 8000b38:	f000 f958 	bl	8000dec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40011000 	.word	0x40011000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ff65 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 fc3b 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fdf1 	bl	8000768 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b94:	08004f38 	.word	0x08004f38
  ldr r2, =_sbss
 8000b98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b9c:	20004158 	.word	0x20004158

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff fe88 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe5a 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20004144 	.word	0x20004144

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20004144 	.word	0x20004144

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e16b      	b.n	80010e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 815a 	bne.w	80010da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80b4 	beq.w	80010da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <HAL_GPIO_Init+0x30c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a5f      	ldr	r2, [pc, #380]	; (80010f8 <HAL_GPIO_Init+0x30c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_GPIO_Init+0x30c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a5b      	ldr	r2, [pc, #364]	; (80010fc <HAL_GPIO_Init+0x310>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a52      	ldr	r2, [pc, #328]	; (8001100 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x226>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a51      	ldr	r2, [pc, #324]	; (8001104 <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x222>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a50      	ldr	r2, [pc, #320]	; (8001108 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x21e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	; (800110c <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x21a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x216>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <HAL_GPIO_Init+0x328>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x212>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_GPIO_Init+0x32c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x20e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4b      	ldr	r2, [pc, #300]	; (800111c <HAL_GPIO_Init+0x330>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x20a>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00e      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	e00c      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	e00a      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8001002:	2304      	movs	r3, #4
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x228>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x228>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x228>
 8001012:	2300      	movs	r3, #0
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	f002 0203 	and.w	r2, r2, #3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4093      	lsls	r3, r2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	4935      	ldr	r1, [pc, #212]	; (80010fc <HAL_GPIO_Init+0x310>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_GPIO_Init+0x334>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001056:	4a32      	ldr	r2, [pc, #200]	; (8001120 <HAL_GPIO_Init+0x334>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_GPIO_Init+0x334>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <HAL_GPIO_Init+0x334>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_GPIO_Init+0x334>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010aa:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_GPIO_Init+0x334>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_GPIO_Init+0x334>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_GPIO_Init+0x334>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3301      	adds	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	f67f ae90 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40021400 	.word	0x40021400
 8001118:	40021800 	.word	0x40021800
 800111c:	40021c00 	.word	0x40021c00
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e264      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4ba0      	ldr	r3, [pc, #640]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001156:	2b08      	cmp	r3, #8
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b9d      	ldr	r3, [pc, #628]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b99      	ldr	r3, [pc, #612]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d157      	bne.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e23f      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x74>
 800118a:	4b91      	ldr	r3, [pc, #580]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b8b      	ldr	r3, [pc, #556]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a8a      	ldr	r2, [pc, #552]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a87      	ldr	r2, [pc, #540]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 80011bc:	4b84      	ldr	r3, [pc, #528]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a83      	ldr	r2, [pc, #524]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a80      	ldr	r2, [pc, #512]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd18 	bl	8000c10 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fd14 	bl	8000c10 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e204      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fd04 	bl	8000c10 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fd00 	bl	8000c10 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1f0      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b6c      	ldr	r3, [pc, #432]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b62      	ldr	r3, [pc, #392]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c4      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4952      	ldr	r1, [pc, #328]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_RCC_OscConfig+0x2b0>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fcb9 	bl	8000c10 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fcb5 	bl	8000c10 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a5      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4940      	ldr	r1, [pc, #256]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_RCC_OscConfig+0x2b0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc98 	bl	8000c10 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc94 	bl	8000c10 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e184      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d030      	beq.n	8001370 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_RCC_OscConfig+0x2b4>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fc78 	bl	8000c10 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc74 	bl	8000c10 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e164      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x200>
 8001342:	e015      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_RCC_OscConfig+0x2b4>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc61 	bl	8000c10 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fc5d 	bl	8000c10 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e14d      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a0 	beq.w	80014be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_OscConfig+0x2b8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d121      	bne.n	80013fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_RCC_OscConfig+0x2b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_RCC_OscConfig+0x2b8>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fc23 	bl	8000c10 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e011      	b.n	80013f2 <HAL_RCC_OscConfig+0x2ce>
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	42470000 	.word	0x42470000
 80013d8:	42470e80 	.word	0x42470e80
 80013dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e0:	f7ff fc16 	bl	8000c10 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e106      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <HAL_RCC_OscConfig+0x4e4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x2f0>
 8001406:	4b81      	ldr	r3, [pc, #516]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a80      	ldr	r2, [pc, #512]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	e01c      	b.n	800144e <HAL_RCC_OscConfig+0x32a>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x312>
 800141c:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a7a      	ldr	r2, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	4b78      	ldr	r3, [pc, #480]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a77      	ldr	r2, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	e00b      	b.n	800144e <HAL_RCC_OscConfig+0x32a>
 8001436:	4b75      	ldr	r3, [pc, #468]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a74      	ldr	r2, [pc, #464]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a71      	ldr	r2, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d015      	beq.n	8001482 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff fbdb 	bl	8000c10 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff fbd7 	bl	8000c10 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f241 3288 	movw	r2, #5000	; 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0c5      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001474:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ee      	beq.n	800145e <HAL_RCC_OscConfig+0x33a>
 8001480:	e014      	b.n	80014ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fbc5 	bl	8000c10 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fbc1 	bl	8000c10 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0af      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a0:	4b5a      	ldr	r3, [pc, #360]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ee      	bne.n	800148a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d105      	bne.n	80014be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b2:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 809b 	beq.w	80015fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d05c      	beq.n	800158e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d141      	bne.n	8001560 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x4ec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb95 	bl	8000c10 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fb91 	bl	8000c10 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e081      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69da      	ldr	r2, [r3, #28]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	019b      	lsls	r3, r3, #6
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	3b01      	subs	r3, #1
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	4937      	ldr	r1, [pc, #220]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x4ec>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb6a 	bl	8000c10 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb66 	bl	8000c10 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e056      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x41c>
 800155e:	e04e      	b.n	80015fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x4ec>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fb53 	bl	8000c10 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fb4f 	bl	8000c10 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e03f      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x44a>
 800158c:	e037      	b.n	80015fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e032      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_RCC_OscConfig+0x4e8>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d028      	beq.n	80015fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d121      	bne.n	80015fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d11a      	bne.n	80015fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ca:	4013      	ands	r3, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d111      	bne.n	80015fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	3b01      	subs	r3, #1
 80015e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40007000 	.word	0x40007000
 800160c:	40023800 	.word	0x40023800
 8001610:	42470060 	.word	0x42470060

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fa84 	bl	8000c10 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fa80 	bl	8000c10 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f894 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08004e7c 	.word	0x08004e7c
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e6:	2100      	movs	r1, #0
 80017e8:	6079      	str	r1, [r7, #4]
 80017ea:	2100      	movs	r1, #0
 80017ec:	60f9      	str	r1, [r7, #12]
 80017ee:	2100      	movs	r1, #0
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017f2:	2100      	movs	r1, #0
 80017f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f6:	4952      	ldr	r1, [pc, #328]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 80017f8:	6889      	ldr	r1, [r1, #8]
 80017fa:	f001 010c 	and.w	r1, r1, #12
 80017fe:	2908      	cmp	r1, #8
 8001800:	d00d      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x3e>
 8001802:	2908      	cmp	r1, #8
 8001804:	f200 8094 	bhi.w	8001930 <HAL_RCC_GetSysClockFreq+0x150>
 8001808:	2900      	cmp	r1, #0
 800180a:	d002      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x32>
 800180c:	2904      	cmp	r1, #4
 800180e:	d003      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x38>
 8001810:	e08e      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_GetSysClockFreq+0x164>)
 8001814:	60bb      	str	r3, [r7, #8]
       break;
 8001816:	e08e      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001818:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_RCC_GetSysClockFreq+0x168>)
 800181a:	60bb      	str	r3, [r7, #8]
      break;
 800181c:	e08b      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181e:	4948      	ldr	r1, [pc, #288]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 8001820:	6849      	ldr	r1, [r1, #4]
 8001822:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001826:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001828:	4945      	ldr	r1, [pc, #276]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 800182a:	6849      	ldr	r1, [r1, #4]
 800182c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001830:	2900      	cmp	r1, #0
 8001832:	d024      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	4942      	ldr	r1, [pc, #264]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 8001836:	6849      	ldr	r1, [r1, #4]
 8001838:	0989      	lsrs	r1, r1, #6
 800183a:	4608      	mov	r0, r1
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001844:	f04f 0500 	mov.w	r5, #0
 8001848:	ea00 0204 	and.w	r2, r0, r4
 800184c:	ea01 0305 	and.w	r3, r1, r5
 8001850:	493d      	ldr	r1, [pc, #244]	; (8001948 <HAL_RCC_GetSysClockFreq+0x168>)
 8001852:	fb01 f003 	mul.w	r0, r1, r3
 8001856:	2100      	movs	r1, #0
 8001858:	fb01 f102 	mul.w	r1, r1, r2
 800185c:	1844      	adds	r4, r0, r1
 800185e:	493a      	ldr	r1, [pc, #232]	; (8001948 <HAL_RCC_GetSysClockFreq+0x168>)
 8001860:	fba2 0101 	umull	r0, r1, r2, r1
 8001864:	1863      	adds	r3, r4, r1
 8001866:	4619      	mov	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	f7fe fd06 	bl	8000280 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e04a      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	461a      	mov	r2, r3
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	ea02 0400 	and.w	r4, r2, r0
 8001896:	ea03 0501 	and.w	r5, r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	014b      	lsls	r3, r1, #5
 80018a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ac:	0142      	lsls	r2, r0, #5
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	1b00      	subs	r0, r0, r4
 80018b4:	eb61 0105 	sbc.w	r1, r1, r5
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	018b      	lsls	r3, r1, #6
 80018c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018c6:	0182      	lsls	r2, r0, #6
 80018c8:	1a12      	subs	r2, r2, r0
 80018ca:	eb63 0301 	sbc.w	r3, r3, r1
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	00d9      	lsls	r1, r3, #3
 80018d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018dc:	00d0      	lsls	r0, r2, #3
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	1912      	adds	r2, r2, r4
 80018e4:	eb45 0303 	adc.w	r3, r5, r3
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	0299      	lsls	r1, r3, #10
 80018f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018f6:	0290      	lsls	r0, r2, #10
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	461a      	mov	r2, r3
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	f7fe fcba 	bl	8000280 <__aeabi_uldivmod>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4613      	mov	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	60bb      	str	r3, [r7, #8]
      break;
 800192e:	e002      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_RCC_GetSysClockFreq+0x164>)
 8001932:	60bb      	str	r3, [r7, #8]
      break;
 8001934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001936:	68bb      	ldr	r3, [r7, #8]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bdb0      	pop	{r4, r5, r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	017d7840 	.word	0x017d7840

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001968:	f7ff fff0 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08004e8c 	.word	0x08004e8c

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08004e8c 	.word	0x08004e8c

080019b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	220f      	movs	r2, #15
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_GetClockConfig+0x60>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0207 	and.w	r2, r3, #7
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e041      	b.n	8001aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f839 	bl	8001ab6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 f9d8 	bl	8001e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d001      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e04e      	b.n	8001b82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0e:	d01d      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d010      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	e007      	b.n	8001b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40000c00 	.word	0x40000c00
 8001ba0:	40010400 	.word	0x40010400
 8001ba4:	40014000 	.word	0x40014000
 8001ba8:	40001800 	.word	0x40001800

08001bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0202 	mvn.w	r2, #2
 8001bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8ee 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8e0 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8f1 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0204 	mvn.w	r2, #4
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8c4 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8b6 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8c7 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0208 	mvn.w	r2, #8
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f89a 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f88c 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f89d 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f870 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f862 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f873 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0201 	mvn.w	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd98 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b80      	cmp	r3, #128	; 0x80
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f902 	bl	8001f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f838 	bl	8001df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8cc 	bl	8001f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d00f      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	; (8001f24 <TIM_Base_SetConfig+0x118>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00b      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <TIM_Base_SetConfig+0x11c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <TIM_Base_SetConfig+0x120>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d108      	bne.n	8001e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d027      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <TIM_Base_SetConfig+0x118>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d023      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <TIM_Base_SetConfig+0x11c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01f      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <TIM_Base_SetConfig+0x120>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d017      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <TIM_Base_SetConfig+0x128>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <TIM_Base_SetConfig+0x12c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <TIM_Base_SetConfig+0x130>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <TIM_Base_SetConfig+0x134>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <TIM_Base_SetConfig+0x138>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <TIM_Base_SetConfig+0x13c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0xf8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	615a      	str	r2, [r3, #20]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	40014800 	.word	0x40014800
 8001f40:	40001800 	.word	0x40001800
 8001f44:	40001c00 	.word	0x40001c00
 8001f48:	40002000 	.word	0x40002000

08001f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e03f      	b.n	8002006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd90 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f929 	bl	8002210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af02      	add	r7, sp, #8
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b20      	cmp	r3, #32
 800202c:	d17c      	bne.n	8002128 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_UART_Transmit+0x2c>
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e075      	b.n	800212a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_UART_Transmit+0x3e>
 8002048:	2302      	movs	r3, #2
 800204a:	e06e      	b.n	800212a <HAL_UART_Transmit+0x11c>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2221      	movs	r2, #33	; 0x21
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002062:	f7fe fdd5 	bl	8000c10 <HAL_GetTick>
 8002066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207c:	d108      	bne.n	8002090 <HAL_UART_Transmit+0x82>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d104      	bne.n	8002090 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e003      	b.n	8002098 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020a0:	e02a      	b.n	80020f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f840 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e036      	b.n	800212a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	3302      	adds	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	e007      	b.n	80020ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1cf      	bne.n	80020a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f810 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e006      	b.n	800212a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b090      	sub	sp, #64	; 0x40
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002142:	e050      	b.n	80021e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800214a:	d04c      	beq.n	80021e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800214c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <UART_WaitOnFlagUntilTimeout+0x30>
 8002152:	f7fe fd5d 	bl	8000c10 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800215e:	429a      	cmp	r2, r3
 8002160:	d241      	bcs.n	80021e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	330c      	adds	r3, #12
 8002180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002182:	637a      	str	r2, [r7, #52]	; 0x34
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e5      	bne.n	8002162 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3314      	adds	r3, #20
 800219c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	e853 3f00 	ldrex	r3, [r3]
 80021a4:	613b      	str	r3, [r7, #16]
   return(result);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3314      	adds	r3, #20
 80021b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b6:	623a      	str	r2, [r7, #32]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ba:	69f9      	ldr	r1, [r7, #28]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e5      	bne.n	8002196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e00f      	b.n	8002206 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4013      	ands	r3, r2
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	429a      	cmp	r2, r3
 8002202:	d09f      	beq.n	8002144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3740      	adds	r7, #64	; 0x40
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002214:	b09f      	sub	sp, #124	; 0x7c
 8002216:	af00      	add	r7, sp, #0
 8002218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800221a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	ea40 0301 	orr.w	r3, r0, r1
 8002230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	431a      	orrs	r2, r3
 800223c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	431a      	orrs	r2, r3
 8002242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4313      	orrs	r3, r2
 8002248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800224a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002254:	f021 010c 	bic.w	r1, r1, #12
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800225e:	430b      	orrs	r3, r1
 8002260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	6999      	ldr	r1, [r3, #24]
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	ea40 0301 	orr.w	r3, r0, r1
 8002278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4bc5      	ldr	r3, [pc, #788]	; (8002594 <UART_SetConfig+0x384>)
 8002280:	429a      	cmp	r2, r3
 8002282:	d004      	beq.n	800228e <UART_SetConfig+0x7e>
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4bc3      	ldr	r3, [pc, #780]	; (8002598 <UART_SetConfig+0x388>)
 800228a:	429a      	cmp	r2, r3
 800228c:	d103      	bne.n	8002296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800228e:	f7ff fb7d 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8002292:	6778      	str	r0, [r7, #116]	; 0x74
 8002294:	e002      	b.n	800229c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002296:	f7ff fb65 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 800229a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800229c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a4:	f040 80b6 	bne.w	8002414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022aa:	461c      	mov	r4, r3
 80022ac:	f04f 0500 	mov.w	r5, #0
 80022b0:	4622      	mov	r2, r4
 80022b2:	462b      	mov	r3, r5
 80022b4:	1891      	adds	r1, r2, r2
 80022b6:	6439      	str	r1, [r7, #64]	; 0x40
 80022b8:	415b      	adcs	r3, r3
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
 80022bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022c0:	1912      	adds	r2, r2, r4
 80022c2:	eb45 0303 	adc.w	r3, r5, r3
 80022c6:	f04f 0000 	mov.w	r0, #0
 80022ca:	f04f 0100 	mov.w	r1, #0
 80022ce:	00d9      	lsls	r1, r3, #3
 80022d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d4:	00d0      	lsls	r0, r2, #3
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	1911      	adds	r1, r2, r4
 80022dc:	6639      	str	r1, [r7, #96]	; 0x60
 80022de:	416b      	adcs	r3, r5
 80022e0:	667b      	str	r3, [r7, #100]	; 0x64
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	1891      	adds	r1, r2, r2
 80022ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80022f0:	415b      	adcs	r3, r3
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022fc:	f7fd ffc0 	bl	8000280 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4ba5      	ldr	r3, [pc, #660]	; (800259c <UART_SetConfig+0x38c>)
 8002306:	fba3 2302 	umull	r2, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	011e      	lsls	r6, r3, #4
 800230e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002310:	461c      	mov	r4, r3
 8002312:	f04f 0500 	mov.w	r5, #0
 8002316:	4622      	mov	r2, r4
 8002318:	462b      	mov	r3, r5
 800231a:	1891      	adds	r1, r2, r2
 800231c:	6339      	str	r1, [r7, #48]	; 0x30
 800231e:	415b      	adcs	r3, r3
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
 8002322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002326:	1912      	adds	r2, r2, r4
 8002328:	eb45 0303 	adc.w	r3, r5, r3
 800232c:	f04f 0000 	mov.w	r0, #0
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	00d9      	lsls	r1, r3, #3
 8002336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800233a:	00d0      	lsls	r0, r2, #3
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	1911      	adds	r1, r2, r4
 8002342:	65b9      	str	r1, [r7, #88]	; 0x58
 8002344:	416b      	adcs	r3, r5
 8002346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	461a      	mov	r2, r3
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	1891      	adds	r1, r2, r2
 8002354:	62b9      	str	r1, [r7, #40]	; 0x28
 8002356:	415b      	adcs	r3, r3
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800235e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002362:	f7fd ff8d 	bl	8000280 <__aeabi_uldivmod>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <UART_SetConfig+0x38c>)
 800236c:	fba3 1302 	umull	r1, r3, r3, r2
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	2164      	movs	r1, #100	; 0x64
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	3332      	adds	r3, #50	; 0x32
 800237e:	4a87      	ldr	r2, [pc, #540]	; (800259c <UART_SetConfig+0x38c>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800238c:	441e      	add	r6, r3
 800238e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002390:	4618      	mov	r0, r3
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	1894      	adds	r4, r2, r2
 800239c:	623c      	str	r4, [r7, #32]
 800239e:	415b      	adcs	r3, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a6:	1812      	adds	r2, r2, r0
 80023a8:	eb41 0303 	adc.w	r3, r1, r3
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	f04f 0500 	mov.w	r5, #0
 80023b4:	00dd      	lsls	r5, r3, #3
 80023b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ba:	00d4      	lsls	r4, r2, #3
 80023bc:	4622      	mov	r2, r4
 80023be:	462b      	mov	r3, r5
 80023c0:	1814      	adds	r4, r2, r0
 80023c2:	653c      	str	r4, [r7, #80]	; 0x50
 80023c4:	414b      	adcs	r3, r1
 80023c6:	657b      	str	r3, [r7, #84]	; 0x54
 80023c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	1891      	adds	r1, r2, r2
 80023d4:	61b9      	str	r1, [r7, #24]
 80023d6:	415b      	adcs	r3, r3
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80023e2:	f7fd ff4d 	bl	8000280 <__aeabi_uldivmod>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4b6c      	ldr	r3, [pc, #432]	; (800259c <UART_SetConfig+0x38c>)
 80023ec:	fba3 1302 	umull	r1, r3, r3, r2
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	2164      	movs	r1, #100	; 0x64
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	3332      	adds	r3, #50	; 0x32
 80023fe:	4a67      	ldr	r2, [pc, #412]	; (800259c <UART_SetConfig+0x38c>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	f003 0207 	and.w	r2, r3, #7
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4432      	add	r2, r6
 8002410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002412:	e0b9      	b.n	8002588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002416:	461c      	mov	r4, r3
 8002418:	f04f 0500 	mov.w	r5, #0
 800241c:	4622      	mov	r2, r4
 800241e:	462b      	mov	r3, r5
 8002420:	1891      	adds	r1, r2, r2
 8002422:	6139      	str	r1, [r7, #16]
 8002424:	415b      	adcs	r3, r3
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800242c:	1912      	adds	r2, r2, r4
 800242e:	eb45 0303 	adc.w	r3, r5, r3
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	00d9      	lsls	r1, r3, #3
 800243c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002440:	00d0      	lsls	r0, r2, #3
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	eb12 0804 	adds.w	r8, r2, r4
 800244a:	eb43 0905 	adc.w	r9, r3, r5
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	008b      	lsls	r3, r1, #2
 8002462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002466:	0082      	lsls	r2, r0, #2
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fd ff08 	bl	8000280 <__aeabi_uldivmod>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <UART_SetConfig+0x38c>)
 8002476:	fba3 2302 	umull	r2, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	011e      	lsls	r6, r3, #4
 800247e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002480:	4618      	mov	r0, r3
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	1894      	adds	r4, r2, r2
 800248c:	60bc      	str	r4, [r7, #8]
 800248e:	415b      	adcs	r3, r3
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002496:	1812      	adds	r2, r2, r0
 8002498:	eb41 0303 	adc.w	r3, r1, r3
 800249c:	f04f 0400 	mov.w	r4, #0
 80024a0:	f04f 0500 	mov.w	r5, #0
 80024a4:	00dd      	lsls	r5, r3, #3
 80024a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024aa:	00d4      	lsls	r4, r2, #3
 80024ac:	4622      	mov	r2, r4
 80024ae:	462b      	mov	r3, r5
 80024b0:	1814      	adds	r4, r2, r0
 80024b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80024b4:	414b      	adcs	r3, r1
 80024b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	008b      	lsls	r3, r1, #2
 80024cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024d0:	0082      	lsls	r2, r0, #2
 80024d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024d6:	f7fd fed3 	bl	8000280 <__aeabi_uldivmod>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <UART_SetConfig+0x38c>)
 80024e0:	fba3 1302 	umull	r1, r3, r3, r2
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	2164      	movs	r1, #100	; 0x64
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	3332      	adds	r3, #50	; 0x32
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <UART_SetConfig+0x38c>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fe:	441e      	add	r6, r3
 8002500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002502:	4618      	mov	r0, r3
 8002504:	f04f 0100 	mov.w	r1, #0
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	1894      	adds	r4, r2, r2
 800250e:	603c      	str	r4, [r7, #0]
 8002510:	415b      	adcs	r3, r3
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002518:	1812      	adds	r2, r2, r0
 800251a:	eb41 0303 	adc.w	r3, r1, r3
 800251e:	f04f 0400 	mov.w	r4, #0
 8002522:	f04f 0500 	mov.w	r5, #0
 8002526:	00dd      	lsls	r5, r3, #3
 8002528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800252c:	00d4      	lsls	r4, r2, #3
 800252e:	4622      	mov	r2, r4
 8002530:	462b      	mov	r3, r5
 8002532:	eb12 0a00 	adds.w	sl, r2, r0
 8002536:	eb43 0b01 	adc.w	fp, r3, r1
 800253a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	f04f 0100 	mov.w	r1, #0
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	008b      	lsls	r3, r1, #2
 800254e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002552:	0082      	lsls	r2, r0, #2
 8002554:	4650      	mov	r0, sl
 8002556:	4659      	mov	r1, fp
 8002558:	f7fd fe92 	bl	8000280 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <UART_SetConfig+0x38c>)
 8002562:	fba3 1302 	umull	r1, r3, r3, r2
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2164      	movs	r1, #100	; 0x64
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	3332      	adds	r3, #50	; 0x32
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <UART_SetConfig+0x38c>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	f003 020f 	and.w	r2, r3, #15
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4432      	add	r2, r6
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	377c      	adds	r7, #124	; 0x7c
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	51eb851f 	.word	0x51eb851f

080025a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80025ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b2:	2b84      	cmp	r3, #132	; 0x84
 80025b4:	d005      	beq.n	80025c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80025b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4413      	add	r3, r2
 80025be:	3303      	adds	r3, #3
 80025c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d6:	f3ef 8305 	mrs	r3, IPSR
 80025da:	607b      	str	r3, [r7, #4]
  return(result);
 80025dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025f8:	f000 fd36 	bl	8003068 <vTaskStartScheduler>
  
  return osOK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}

08002602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002604:	b089      	sub	sp, #36	; 0x24
 8002606:	af04      	add	r7, sp, #16
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <osThreadCreate+0x54>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685c      	ldr	r4, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681d      	ldr	r5, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691e      	ldr	r6, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ffb6 	bl	80025a0 <makeFreeRtosPriority>
 8002634:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800263e:	9202      	str	r2, [sp, #8]
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	9100      	str	r1, [sp, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4632      	mov	r2, r6
 8002648:	4629      	mov	r1, r5
 800264a:	4620      	mov	r0, r4
 800264c:	f000 f928 	bl	80028a0 <xTaskCreateStatic>
 8002650:	4603      	mov	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e01c      	b.n	8002690 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685c      	ldr	r4, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002662:	b29e      	uxth	r6, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff98 	bl	80025a0 <makeFreeRtosPriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	9200      	str	r2, [sp, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4632      	mov	r2, r6
 800267e:	4629      	mov	r1, r5
 8002680:	4620      	mov	r0, r4
 8002682:	f000 f96a 	bl	800295a <xTaskCreate>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002690:	68fb      	ldr	r3, [r7, #12]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <osDelay+0x16>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	e000      	b.n	80026b2 <osDelay+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 faaa 	bl	8002c0c <vTaskDelay>
  
  return osOK;
 80026b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fb38 	bl	8002d40 <vTaskSuspend>
  
  return osOK;
 80026d0:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80026e4:	f7ff ff74 	bl	80025d0 <inHandlerMode>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fc48 	bl	8002f84 <xTaskResumeFromISR>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d10b      	bne.n	8002712 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <osThreadResume+0x40>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	e002      	b.n	8002712 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fbdb 	bl	8002ec8 <vTaskResume>
  }
  return osOK;
 8002712:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	e000ed04 	.word	0xe000ed04

08002720 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f001 f92d 	bl	8003988 <vTaskList>
#endif
  return osOK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f103 0208 	add.w	r2, r3, #8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f103 0208 	add.w	r2, r3, #8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f103 0208 	add.w	r2, r3, #8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f0:	d103      	bne.n	80027fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e00c      	b.n	8002814 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3308      	adds	r3, #8
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e002      	b.n	8002808 <vListInsert+0x2e>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d2f6      	bcs.n	8002802 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6892      	ldr	r2, [r2, #8]
 8002862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	d103      	bne.n	8002880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08e      	sub	sp, #56	; 0x38
 80028a4:	af04      	add	r7, sp, #16
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	61fb      	str	r3, [r7, #28]
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028e6:	23bc      	movs	r3, #188	; 0xbc
 80028e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2bbc      	cmp	r3, #188	; 0xbc
 80028ee:	d00a      	beq.n	8002906 <xTaskCreateStatic+0x66>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	61bb      	str	r3, [r7, #24]
}
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002906:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01e      	beq.n	800294c <xTaskCreateStatic+0xac>
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01b      	beq.n	800294c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	2202      	movs	r2, #2
 8002922:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002926:	2300      	movs	r3, #0
 8002928:	9303      	str	r3, [sp, #12]
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f850 	bl	80029e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002946:	f000 f8f3 	bl	8002b30 <prvAddNewTaskToReadyList>
 800294a:	e001      	b.n	8002950 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002950:	697b      	ldr	r3, [r7, #20]
	}
 8002952:	4618      	mov	r0, r3
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08c      	sub	sp, #48	; 0x30
 800295e:	af04      	add	r7, sp, #16
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fb52 	bl	8004018 <pvPortMalloc>
 8002974:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800297c:	20bc      	movs	r0, #188	; 0xbc
 800297e:	f001 fb4b 	bl	8004018 <pvPortMalloc>
 8002982:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e005      	b.n	800299e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f001 fc0c 	bl	80041b0 <vPortFree>
 8002998:	e001      	b.n	800299e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	2300      	movs	r3, #0
 80029b0:	9303      	str	r3, [sp, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	9302      	str	r3, [sp, #8]
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f80e 	bl	80029e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029c8:	69f8      	ldr	r0, [r7, #28]
 80029ca:	f000 f8b1 	bl	8002b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e002      	b.n	80029da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029da:	69bb      	ldr	r3, [r7, #24]
	}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	461a      	mov	r2, r3
 80029fc:	21a5      	movs	r1, #165	; 0xa5
 80029fe:	f001 fd2f 	bl	8004460 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	617b      	str	r3, [r7, #20]
}
 8002a38:	bf00      	nop
 8002a3a:	e7fe      	b.n	8002a3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01f      	beq.n	8002a82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e012      	b.n	8002a6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	7819      	ldrb	r1, [r3, #0]
 8002a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	3334      	adds	r3, #52	; 0x34
 8002a58:	460a      	mov	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d9e9      	bls.n	8002a48 <prvInitialiseNewTask+0x64>
 8002a74:	e000      	b.n	8002a78 <prvInitialiseNewTask+0x94>
			{
				break;
 8002a76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	e003      	b.n	8002a8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d901      	bls.n	8002a94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a90:	2306      	movs	r3, #6
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fe64 	bl	8002778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe5f 	bl	8002778 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f1c3 0207 	rsb	r2, r3, #7
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	3354      	adds	r3, #84	; 0x54
 8002ae4:	2260      	movs	r2, #96	; 0x60
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fcb9 	bl	8004460 <memset>
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <prvInitialiseNewTask+0x140>)
 8002af2:	659a      	str	r2, [r3, #88]	; 0x58
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <prvInitialiseNewTask+0x144>)
 8002af8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <prvInitialiseNewTask+0x148>)
 8002afe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	69b8      	ldr	r0, [r7, #24]
 8002b06:	f001 f83b 	bl	8003b80 <pxPortInitialiseStack>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b1c:	bf00      	nop
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	08004eb4 	.word	0x08004eb4
 8002b28:	08004ed4 	.word	0x08004ed4
 8002b2c:	08004e94 	.word	0x08004e94

08002b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b38:	f001 f94c 	bl	8003dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <prvAddNewTaskToReadyList+0xc0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <prvAddNewTaskToReadyList+0xc0>)
 8002b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <prvAddNewTaskToReadyList+0xc4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b4e:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <prvAddNewTaskToReadyList+0xc4>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <prvAddNewTaskToReadyList+0xc0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d110      	bne.n	8002b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b5c:	f000 fd58 	bl	8003610 <prvInitialiseTaskLists>
 8002b60:	e00d      	b.n	8002b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <prvAddNewTaskToReadyList+0xc8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <prvAddNewTaskToReadyList+0xc4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d802      	bhi.n	8002b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <prvAddNewTaskToReadyList+0xc4>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <prvAddNewTaskToReadyList+0xcc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <prvAddNewTaskToReadyList+0xcc>)
 8002b86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <prvAddNewTaskToReadyList+0xcc>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <prvAddNewTaskToReadyList+0xd0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <prvAddNewTaskToReadyList+0xd0>)
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <prvAddNewTaskToReadyList+0xd4>)
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7ff fdea 	bl	8002792 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bbe:	f001 f939 	bl	8003e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <prvAddNewTaskToReadyList+0xc8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <prvAddNewTaskToReadyList+0xc4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d207      	bcs.n	8002be8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <prvAddNewTaskToReadyList+0xd8>)
 8002bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000450 	.word	0x20000450
 8002bf4:	20000350 	.word	0x20000350
 8002bf8:	2000045c 	.word	0x2000045c
 8002bfc:	2000046c 	.word	0x2000046c
 8002c00:	20000458 	.word	0x20000458
 8002c04:	20000354 	.word	0x20000354
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d017      	beq.n	8002c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <vTaskDelay+0x60>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <vTaskDelay+0x30>
	__asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	60bb      	str	r3, [r7, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c3c:	f000 fa7e 	bl	800313c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c40:	2100      	movs	r1, #0
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 ff36 	bl	8003ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c48:	f000 fa86 	bl	8003158 <xTaskResumeAll>
 8002c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <vTaskDelay+0x64>)
 8002c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000478 	.word	0x20000478
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <eTaskGetState+0x28>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	60bb      	str	r3, [r7, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <eTaskGetState+0xb8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d102      	bne.n	8002cac <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e03a      	b.n	8002d22 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8002cac:	f001 f892 	bl	8003dd4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <eTaskGetState+0xbc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <eTaskGetState+0xc0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002cc2:	f001 f8b7 	bl	8003e34 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d003      	beq.n	8002cd6 <eTaskGetState+0x62>
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d102      	bne.n	8002cdc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	77fb      	strb	r3, [r7, #31]
 8002cda:	e022      	b.n	8002d22 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <eTaskGetState+0xc4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d112      	bne.n	8002d0a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e011      	b.n	8002d22 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e00e      	b.n	8002d22 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8002d04:	2302      	movs	r3, #2
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e00b      	b.n	8002d22 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <eTaskGetState+0xc8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d002      	beq.n	8002d18 <eTaskGetState+0xa4>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e001      	b.n	8002d22 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000350 	.word	0x20000350
 8002d30:	20000408 	.word	0x20000408
 8002d34:	2000040c 	.word	0x2000040c
 8002d38:	2000043c 	.word	0x2000043c
 8002d3c:	20000424 	.word	0x20000424

08002d40 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d48:	f001 f844 	bl	8003dd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <vTaskSuspend+0x18>
 8002d52:	4b3c      	ldr	r3, [pc, #240]	; (8002e44 <vTaskSuspend+0x104>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	e000      	b.n	8002d5a <vTaskSuspend+0x1a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fd73 	bl	800284c <uxListRemove>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d115      	bne.n	8002d98 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <vTaskSuspend+0x108>)
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <vTaskSuspend+0x58>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	2201      	movs	r2, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <vTaskSuspend+0x10c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4013      	ands	r3, r2
 8002d94:	4a2d      	ldr	r2, [pc, #180]	; (8002e4c <vTaskSuspend+0x10c>)
 8002d96:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3318      	adds	r3, #24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fd51 	bl	800284c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4827      	ldr	r0, [pc, #156]	; (8002e50 <vTaskSuspend+0x110>)
 8002db2:	f7ff fcee 	bl	8002792 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d103      	bne.n	8002dca <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002dca:	f001 f833 	bl	8003e34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <vTaskSuspend+0x114>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002dd6:	f000 fffd 	bl	8003dd4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002dda:	f000 fd8f 	bl	80038fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002dde:	f001 f829 	bl	8003e34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <vTaskSuspend+0x104>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d127      	bne.n	8002e3c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <vTaskSuspend+0x114>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <vTaskSuspend+0x118>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <vTaskSuspend+0xd2>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	60bb      	str	r3, [r7, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <vTaskSuspend+0x11c>)
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e22:	e00b      	b.n	8002e3c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <vTaskSuspend+0x110>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <vTaskSuspend+0x120>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d103      	bne.n	8002e38 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <vTaskSuspend+0x104>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
	}
 8002e36:	e001      	b.n	8002e3c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8002e38:	f000 fb70 	bl	800351c <vTaskSwitchContext>
	}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000350 	.word	0x20000350
 8002e48:	20000354 	.word	0x20000354
 8002e4c:	20000458 	.word	0x20000458
 8002e50:	2000043c 	.word	0x2000043c
 8002e54:	2000045c 	.word	0x2000045c
 8002e58:	20000478 	.word	0x20000478
 8002e5c:	e000ed04 	.word	0xe000ed04
 8002e60:	20000450 	.word	0x20000450

08002e64 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	60fb      	str	r3, [r7, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <prvTaskIsTaskSuspended+0x5c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10a      	bne.n	8002eb0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <prvTaskIsTaskSuspended+0x60>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d005      	beq.n	8002eb0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002eb0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000043c 	.word	0x2000043c
 8002ec4:	20000410 	.word	0x20000410

08002ec8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <vTaskResume+0x28>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60bb      	str	r3, [r7, #8]
}
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <vTaskResume+0xac>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d037      	beq.n	8002f6a <vTaskResume+0xa2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d034      	beq.n	8002f6a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8002f00:	f000 ff68 	bl	8003dd4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff ffad 	bl	8002e64 <prvTaskIsTaskSuspended>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d02a      	beq.n	8002f66 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fc99 	bl	800284c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <vTaskResume+0xb0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <vTaskResume+0xb0>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <vTaskResume+0xb4>)
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f7ff fc25 	bl	8002792 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <vTaskResume+0xac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d307      	bcc.n	8002f66 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <vTaskResume+0xb8>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002f66:	f000 ff65 	bl	8003e34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000350 	.word	0x20000350
 8002f78:	20000458 	.word	0x20000458
 8002f7c:	20000354 	.word	0x20000354
 8002f80:	e000ed04 	.word	0xe000ed04

08002f84 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61bb      	str	r3, [r7, #24]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fb0:	f000 fff2 	bl	8003f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	617a      	str	r2, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fcc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fce:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002fd0:	6a38      	ldr	r0, [r7, #32]
 8002fd2:	f7ff ff47 	bl	8002e64 <prvTaskIsTaskSuspended>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02f      	beq.n	800303c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <xTaskResumeFromISR+0xd0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d125      	bne.n	8003030 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <xTaskResumeFromISR+0xd4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d301      	bcc.n	8002ff6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fc26 	bl	800284c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <xTaskResumeFromISR+0xd8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4313      	orrs	r3, r2
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <xTaskResumeFromISR+0xd8>)
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <xTaskResumeFromISR+0xdc>)
 8003020:	441a      	add	r2, r3
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7ff fbb2 	bl	8002792 <vListInsertEnd>
 800302e:	e005      	b.n	800303c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	3318      	adds	r3, #24
 8003034:	4619      	mov	r1, r3
 8003036:	480b      	ldr	r0, [pc, #44]	; (8003064 <xTaskResumeFromISR+0xe0>)
 8003038:	f7ff fbab 	bl	8002792 <vListInsertEnd>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003046:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800304a:	4618      	mov	r0, r3
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000478 	.word	0x20000478
 8003058:	20000350 	.word	0x20000350
 800305c:	20000458 	.word	0x20000458
 8003060:	20000354 	.word	0x20000354
 8003064:	20000410 	.word	0x20000410

08003068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003076:	463a      	mov	r2, r7
 8003078:	1d39      	adds	r1, r7, #4
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fa7a 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	460a      	mov	r2, r1
 8003096:	4921      	ldr	r1, [pc, #132]	; (800311c <vTaskStartScheduler+0xb4>)
 8003098:	4821      	ldr	r0, [pc, #132]	; (8003120 <vTaskStartScheduler+0xb8>)
 800309a:	f7ff fc01 	bl	80028a0 <xTaskCreateStatic>
 800309e:	4603      	mov	r3, r0
 80030a0:	4a20      	ldr	r2, [pc, #128]	; (8003124 <vTaskStartScheduler+0xbc>)
 80030a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030a4:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <vTaskStartScheduler+0xbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e001      	b.n	80030b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d11b      	bne.n	80030f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	613b      	str	r3, [r7, #16]
}
 80030ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <vTaskStartScheduler+0xc0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3354      	adds	r3, #84	; 0x54
 80030d6:	4a15      	ldr	r2, [pc, #84]	; (800312c <vTaskStartScheduler+0xc4>)
 80030d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <vTaskStartScheduler+0xc8>)
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <vTaskStartScheduler+0xcc>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <vTaskStartScheduler+0xd0>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030ee:	f000 fdcf 	bl	8003c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030f2:	e00e      	b.n	8003112 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030fa:	d10a      	bne.n	8003112 <vTaskStartScheduler+0xaa>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	60fb      	str	r3, [r7, #12]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <vTaskStartScheduler+0xa8>
}
 8003112:	bf00      	nop
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	08004e64 	.word	0x08004e64
 8003120:	080035e1 	.word	0x080035e1
 8003124:	20000474 	.word	0x20000474
 8003128:	20000350 	.word	0x20000350
 800312c:	20000010 	.word	0x20000010
 8003130:	20000470 	.word	0x20000470
 8003134:	2000045c 	.word	0x2000045c
 8003138:	20000454 	.word	0x20000454

0800313c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <vTaskSuspendAll+0x18>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a03      	ldr	r2, [pc, #12]	; (8003154 <vTaskSuspendAll+0x18>)
 8003148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	20000478 	.word	0x20000478

08003158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <xTaskResumeAll+0x114>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xTaskResumeAll+0x2c>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	603b      	str	r3, [r7, #0]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003184:	f000 fe26 	bl	8003dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <xTaskResumeAll+0x114>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	4a37      	ldr	r2, [pc, #220]	; (800326c <xTaskResumeAll+0x114>)
 8003190:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <xTaskResumeAll+0x114>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d161      	bne.n	800325e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800319a:	4b35      	ldr	r3, [pc, #212]	; (8003270 <xTaskResumeAll+0x118>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d05d      	beq.n	800325e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a2:	e02e      	b.n	8003202 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a4:	4b33      	ldr	r3, [pc, #204]	; (8003274 <xTaskResumeAll+0x11c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3318      	adds	r3, #24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fb4b 	bl	800284c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fb46 	bl	800284c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <xTaskResumeAll+0x120>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <xTaskResumeAll+0x120>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <xTaskResumeAll+0x124>)
 80031e0:	441a      	add	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7ff fad2 	bl	8002792 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <xTaskResumeAll+0x128>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <xTaskResumeAll+0x12c>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <xTaskResumeAll+0x11c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1cc      	bne.n	80031a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003210:	f000 fb74 	bl	80038fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <xTaskResumeAll+0x130>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003220:	f000 f8c4 	bl	80033ac <xTaskIncrementTick>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <xTaskResumeAll+0x12c>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f1      	bne.n	8003220 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <xTaskResumeAll+0x130>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <xTaskResumeAll+0x12c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <xTaskResumeAll+0x134>)
 8003250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800325e:	f000 fde9 	bl	8003e34 <vPortExitCritical>

	return xAlreadyYielded;
 8003262:	68bb      	ldr	r3, [r7, #8]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000478 	.word	0x20000478
 8003270:	20000450 	.word	0x20000450
 8003274:	20000410 	.word	0x20000410
 8003278:	20000458 	.word	0x20000458
 800327c:	20000354 	.word	0x20000354
 8003280:	20000350 	.word	0x20000350
 8003284:	20000464 	.word	0x20000464
 8003288:	20000460 	.word	0x20000460
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	2307      	movs	r3, #7
 80032a2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80032a4:	f7ff ff4a 	bl	800313c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80032a8:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <uxTaskGetSystemState+0x104>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d368      	bcc.n	8003384 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1898      	adds	r0, r3, r2
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4a31      	ldr	r2, [pc, #196]	; (8003398 <uxTaskGetSystemState+0x108>)
 80032d4:	4413      	add	r3, r2
 80032d6:	2201      	movs	r2, #1
 80032d8:	4619      	mov	r1, r3
 80032da:	f000 fa6d 	bl	80037b8 <prvListTasksWithinSingleList>
 80032de:	4602      	mov	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e2      	bne.n	80032b2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	4a27      	ldr	r2, [pc, #156]	; (800339c <uxTaskGetSystemState+0x10c>)
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	2202      	movs	r2, #2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fa58 	bl	80037b8 <prvListTasksWithinSingleList>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4413      	add	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <uxTaskGetSystemState+0x110>)
 8003322:	6811      	ldr	r1, [r2, #0]
 8003324:	2202      	movs	r2, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa46 	bl	80037b8 <prvListTasksWithinSingleList>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4413      	add	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	2204      	movs	r2, #4
 8003346:	4917      	ldr	r1, [pc, #92]	; (80033a4 <uxTaskGetSystemState+0x114>)
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fa35 	bl	80037b8 <prvListTasksWithinSingleList>
 800334e:	4602      	mov	r2, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	4413      	add	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	461a      	mov	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	2203      	movs	r2, #3
 8003368:	490f      	ldr	r1, [pc, #60]	; (80033a8 <uxTaskGetSystemState+0x118>)
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fa24 	bl	80037b8 <prvListTasksWithinSingleList>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003384:	f7ff fee8 	bl	8003158 <xTaskResumeAll>

		return uxTask;
 8003388:	697b      	ldr	r3, [r7, #20]
	}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000450 	.word	0x20000450
 8003398:	20000354 	.word	0x20000354
 800339c:	20000408 	.word	0x20000408
 80033a0:	2000040c 	.word	0x2000040c
 80033a4:	20000424 	.word	0x20000424
 80033a8:	2000043c 	.word	0x2000043c

080033ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b6:	4b4e      	ldr	r3, [pc, #312]	; (80034f0 <xTaskIncrementTick+0x144>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 808e 	bne.w	80034dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <xTaskIncrementTick+0x148>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <xTaskIncrementTick+0x148>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d120      	bne.n	8003416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033d4:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <xTaskIncrementTick+0x14c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	603b      	str	r3, [r7, #0]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xTaskIncrementTick+0x46>
 80033f4:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <xTaskIncrementTick+0x14c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <xTaskIncrementTick+0x150>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <xTaskIncrementTick+0x14c>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <xTaskIncrementTick+0x150>)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <xTaskIncrementTick+0x154>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <xTaskIncrementTick+0x154>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	f000 fa73 	bl	80038fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <xTaskIncrementTick+0x158>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d348      	bcc.n	80034b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <xTaskIncrementTick+0x14c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <xTaskIncrementTick+0x158>)
 800342c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003430:	601a      	str	r2, [r3, #0]
					break;
 8003432:	e03e      	b.n	80034b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <xTaskIncrementTick+0x14c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d203      	bcs.n	8003454 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800344c:	4a2d      	ldr	r2, [pc, #180]	; (8003504 <xTaskIncrementTick+0x158>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003452:	e02e      	b.n	80034b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f9f7 	bl	800284c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3318      	adds	r3, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f9ee 	bl	800284c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	4b23      	ldr	r3, [pc, #140]	; (8003508 <xTaskIncrementTick+0x15c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	4a22      	ldr	r2, [pc, #136]	; (8003508 <xTaskIncrementTick+0x15c>)
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <xTaskIncrementTick+0x160>)
 8003490:	441a      	add	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7ff f97a 	bl	8002792 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <xTaskIncrementTick+0x164>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3b9      	bcc.n	8003420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b0:	e7b6      	b.n	8003420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <xTaskIncrementTick+0x164>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	4914      	ldr	r1, [pc, #80]	; (800350c <xTaskIncrementTick+0x160>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d901      	bls.n	80034ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <xTaskIncrementTick+0x168>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e004      	b.n	80034e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <xTaskIncrementTick+0x16c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <xTaskIncrementTick+0x16c>)
 80034e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000478 	.word	0x20000478
 80034f4:	20000454 	.word	0x20000454
 80034f8:	20000408 	.word	0x20000408
 80034fc:	2000040c 	.word	0x2000040c
 8003500:	20000468 	.word	0x20000468
 8003504:	20000470 	.word	0x20000470
 8003508:	20000458 	.word	0x20000458
 800350c:	20000354 	.word	0x20000354
 8003510:	20000350 	.word	0x20000350
 8003514:	20000464 	.word	0x20000464
 8003518:	20000460 	.word	0x20000460

0800351c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <vTaskSwitchContext+0xac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <vTaskSwitchContext+0xb0>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003530:	e044      	b.n	80035bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <vTaskSwitchContext+0xb0>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <vTaskSwitchContext+0xb4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003546:	7afb      	ldrb	r3, [r7, #11]
 8003548:	f1c3 031f 	rsb	r3, r3, #31
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	4921      	ldr	r1, [pc, #132]	; (80035d4 <vTaskSwitchContext+0xb8>)
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	607b      	str	r3, [r7, #4]
}
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <vTaskSwitchContext+0x5a>
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <vTaskSwitchContext+0xb8>)
 8003584:	4413      	add	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	3308      	adds	r3, #8
 800359a:	429a      	cmp	r2, r3
 800359c:	d104      	bne.n	80035a8 <vTaskSwitchContext+0x8c>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <vTaskSwitchContext+0xbc>)
 80035b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <vTaskSwitchContext+0xbc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3354      	adds	r3, #84	; 0x54
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <vTaskSwitchContext+0xc0>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000478 	.word	0x20000478
 80035cc:	20000464 	.word	0x20000464
 80035d0:	20000458 	.word	0x20000458
 80035d4:	20000354 	.word	0x20000354
 80035d8:	20000350 	.word	0x20000350
 80035dc:	20000010 	.word	0x20000010

080035e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035e8:	f000 f852 	bl	8003690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <prvIdleTask+0x28>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d9f9      	bls.n	80035e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <prvIdleTask+0x2c>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003604:	e7f0      	b.n	80035e8 <prvIdleTask+0x8>
 8003606:	bf00      	nop
 8003608:	20000354 	.word	0x20000354
 800360c:	e000ed04 	.word	0xe000ed04

08003610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	e00c      	b.n	8003636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <prvInitialiseTaskLists+0x60>)
 8003628:	4413      	add	r3, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f884 	bl	8002738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3301      	adds	r3, #1
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b06      	cmp	r3, #6
 800363a:	d9ef      	bls.n	800361c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <prvInitialiseTaskLists+0x64>)
 800363e:	f7ff f87b 	bl	8002738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003642:	480d      	ldr	r0, [pc, #52]	; (8003678 <prvInitialiseTaskLists+0x68>)
 8003644:	f7ff f878 	bl	8002738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003648:	480c      	ldr	r0, [pc, #48]	; (800367c <prvInitialiseTaskLists+0x6c>)
 800364a:	f7ff f875 	bl	8002738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800364e:	480c      	ldr	r0, [pc, #48]	; (8003680 <prvInitialiseTaskLists+0x70>)
 8003650:	f7ff f872 	bl	8002738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003654:	480b      	ldr	r0, [pc, #44]	; (8003684 <prvInitialiseTaskLists+0x74>)
 8003656:	f7ff f86f 	bl	8002738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <prvInitialiseTaskLists+0x78>)
 800365c:	4a05      	ldr	r2, [pc, #20]	; (8003674 <prvInitialiseTaskLists+0x64>)
 800365e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <prvInitialiseTaskLists+0x7c>)
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <prvInitialiseTaskLists+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000354 	.word	0x20000354
 8003674:	200003e0 	.word	0x200003e0
 8003678:	200003f4 	.word	0x200003f4
 800367c:	20000410 	.word	0x20000410
 8003680:	20000424 	.word	0x20000424
 8003684:	2000043c 	.word	0x2000043c
 8003688:	20000408 	.word	0x20000408
 800368c:	2000040c 	.word	0x2000040c

08003690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003696:	e019      	b.n	80036cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003698:	f000 fb9c 	bl	8003dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <prvCheckTasksWaitingTermination+0x50>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f8cf 	bl	800284c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <prvCheckTasksWaitingTermination+0x54>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <prvCheckTasksWaitingTermination+0x54>)
 80036b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <prvCheckTasksWaitingTermination+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3b01      	subs	r3, #1
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <prvCheckTasksWaitingTermination+0x58>)
 80036c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036c2:	f000 fbb7 	bl	8003e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8e4 	bl	8003894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <prvCheckTasksWaitingTermination+0x58>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e1      	bne.n	8003698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000424 	.word	0x20000424
 80036e4:	20000450 	.word	0x20000450
 80036e8:	20000438 	.word	0x20000438

080036ec <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <vTaskGetInfo+0x1a>
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <vTaskGetInfo+0xc8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	e000      	b.n	8003708 <vTaskGetInfo+0x1c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d01a      	beq.n	800377c <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <vTaskGetInfo+0xc8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	429a      	cmp	r2, r3
 800374e:	d103      	bne.n	8003758 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2200      	movs	r2, #0
 8003754:	731a      	strb	r2, [r3, #12]
 8003756:	e018      	b.n	800378a <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d112      	bne.n	800378a <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8003764:	f7ff fcea 	bl	800313c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2202      	movs	r2, #2
 8003774:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8003776:	f7ff fcef 	bl	8003158 <xTaskResumeAll>
 800377a:	e006      	b.n	800378a <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f7ff fa79 	bl	8002c74 <eTaskGetState>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f861 	bl	800385c <prvTaskCheckFreeStackSpace>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80037a2:	e002      	b.n	80037aa <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	841a      	strh	r2, [r3, #32]
	}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000350 	.word	0x20000350

080037b8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d03f      	beq.n	8003852 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	3308      	adds	r3, #8
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d104      	bne.n	80037f6 <prvListTasksWithinSingleList+0x3e>
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	3308      	adds	r3, #8
 8003814:	429a      	cmp	r2, r3
 8003816:	d104      	bne.n	8003822 <prvListTasksWithinSingleList+0x6a>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	461a      	mov	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1899      	adds	r1, r3, r2
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	2201      	movs	r2, #1
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff54 	bl	80036ec <vTaskGetInfo>
				uxTask++;
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	3301      	adds	r3, #1
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	429a      	cmp	r2, r3
 8003850:	d1d5      	bne.n	80037fe <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003868:	e005      	b.n	8003876 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3301      	adds	r3, #1
 800386e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3301      	adds	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2ba5      	cmp	r3, #165	; 0xa5
 800387c:	d0f5      	beq.n	800386a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	b29b      	uxth	r3, r3
	}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3354      	adds	r3, #84	; 0x54
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe4d 	bl	8004540 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fc7b 	bl	80041b0 <vPortFree>
				vPortFree( pxTCB );
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fc78 	bl	80041b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038c0:	e018      	b.n	80038f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d103      	bne.n	80038d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fc6f 	bl	80041b0 <vPortFree>
	}
 80038d2:	e00f      	b.n	80038f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d00a      	beq.n	80038f4 <prvDeleteTCB+0x60>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <prvDeleteTCB+0x5e>
	}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <prvResetNextTaskUnblockTime+0x38>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <prvResetNextTaskUnblockTime+0x3c>)
 800390e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003914:	e008      	b.n	8003928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <prvResetNextTaskUnblockTime+0x38>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <prvResetNextTaskUnblockTime+0x3c>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	20000408 	.word	0x20000408
 8003938:	20000470 	.word	0x20000470

0800393c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fe85 	bl	8004658 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fc fc3e 	bl	80001d0 <strlen>
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	e007      	b.n	8003968 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	2220      	movs	r2, #32
 8003960:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b0e      	cmp	r3, #14
 800396c:	d9f4      	bls.n	8003958 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4413      	add	r3, r2
	}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8003996:	4b45      	ldr	r3, [pc, #276]	; (8003aac <vTaskList+0x124>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <vTaskList+0x124>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fb35 	bl	8004018 <pvPortMalloc>
 80039ae:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d076      	beq.n	8003aa4 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80039b6:	2200      	movs	r2, #0
 80039b8:	68f9      	ldr	r1, [r7, #12]
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f7ff fc68 	bl	8003290 <uxTaskGetSystemState>
 80039c0:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e066      	b.n	8003a96 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4413      	add	r3, r2
 80039d8:	7b1b      	ldrb	r3, [r3, #12]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d81b      	bhi.n	8003a16 <vTaskList+0x8e>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <vTaskList+0x5c>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	080039f9 	.word	0x080039f9
 80039e8:	080039ff 	.word	0x080039ff
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003a0b 	.word	0x08003a0b
 80039f4:	08003a11 	.word	0x08003a11
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80039f8:	2358      	movs	r3, #88	; 0x58
 80039fa:	74fb      	strb	r3, [r7, #19]
										break;
 80039fc:	e00e      	b.n	8003a1c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 80039fe:	2352      	movs	r3, #82	; 0x52
 8003a00:	74fb      	strb	r3, [r7, #19]
										break;
 8003a02:	e00b      	b.n	8003a1c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8003a04:	2342      	movs	r3, #66	; 0x42
 8003a06:	74fb      	strb	r3, [r7, #19]
										break;
 8003a08:	e008      	b.n	8003a1c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8003a0a:	2353      	movs	r3, #83	; 0x53
 8003a0c:	74fb      	strb	r3, [r7, #19]
										break;
 8003a0e:	e005      	b.n	8003a1c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8003a10:	2344      	movs	r3, #68	; 0x44
 8003a12:	74fb      	strb	r3, [r7, #19]
										break;
 8003a14:	e002      	b.n	8003a1c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8003a16:	2300      	movs	r3, #0
 8003a18:	74fb      	strb	r3, [r7, #19]
										break;
 8003a1a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff83 	bl	800393c <prvWriteNameToBuffer>
 8003a36:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8003a38:	7cf9      	ldrb	r1, [r7, #19]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4413      	add	r3, r2
 8003a4a:	6918      	ldr	r0, [r3, #16]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	8c1b      	ldrh	r3, [r3, #32]
 8003a5e:	461c      	mov	r4, r3
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4413      	add	r3, r2
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	9400      	str	r4, [sp, #0]
 8003a76:	4603      	mov	r3, r0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <vTaskList+0x128>)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fdcb 	bl	8004618 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fba4 	bl	80001d0 <strlen>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	3301      	adds	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d394      	bcc.n	80039c8 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f000 fb86 	bl	80041b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	20000450 	.word	0x20000450
 8003ab0:	08004e6c 	.word	0x08004e6c

08003ab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe febe 	bl	800284c <uxListRemove>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	2201      	movs	r2, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d10a      	bne.n	8003b0c <prvAddCurrentTaskToDelayedList+0x58>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	481a      	ldr	r0, [pc, #104]	; (8003b70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b06:	f7fe fe44 	bl	8002792 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b0a:	e026      	b.n	8003b5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d209      	bcs.n	8003b38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fe fe52 	bl	80027da <vListInsert>
}
 8003b36:	e010      	b.n	8003b5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7fe fe48 	bl	80027da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d202      	bcs.n	8003b5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000454 	.word	0x20000454
 8003b68:	20000350 	.word	0x20000350
 8003b6c:	20000458 	.word	0x20000458
 8003b70:	2000043c 	.word	0x2000043c
 8003b74:	2000040c 	.word	0x2000040c
 8003b78:	20000408 	.word	0x20000408
 8003b7c:	20000470 	.word	0x20000470

08003b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b04      	subs	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f023 0201 	bic.w	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3b04      	subs	r3, #4
 8003bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <pxPortInitialiseStack+0x64>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3b14      	subs	r3, #20
 8003bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b04      	subs	r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f06f 0202 	mvn.w	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3b20      	subs	r3, #32
 8003bd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	08003be9 	.word	0x08003be9

08003be8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <prvTaskExitError+0x54>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfa:	d00a      	beq.n	8003c12 <prvTaskExitError+0x2a>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	60fb      	str	r3, [r7, #12]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <prvTaskExitError+0x28>
	__asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	60bb      	str	r3, [r7, #8]
}
 8003c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c26:	bf00      	nop
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0fc      	beq.n	8003c28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	2000000c 	.word	0x2000000c

08003c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <pxCurrentTCBConst2>)
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	6808      	ldr	r0, [r1, #0]
 8003c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	f380 8809 	msr	PSP, r0
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8811 	msr	BASEPRI, r0
 8003c5a:	4770      	bx	lr
 8003c5c:	f3af 8000 	nop.w

08003c60 <pxCurrentTCBConst2>:
 8003c60:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop

08003c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c68:	4808      	ldr	r0, [pc, #32]	; (8003c8c <prvPortStartFirstTask+0x24>)
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f380 8808 	msr	MSP, r0
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8814 	msr	CONTROL, r0
 8003c7a:	b662      	cpsie	i
 8003c7c:	b661      	cpsie	f
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	df00      	svc	0
 8003c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed08 	.word	0xe000ed08

08003c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c96:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <xPortStartScheduler+0x120>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a46      	ldr	r2, [pc, #280]	; (8003db4 <xPortStartScheduler+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10a      	bne.n	8003cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	613b      	str	r3, [r7, #16]
}
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cb6:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <xPortStartScheduler+0x120>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <xPortStartScheduler+0x128>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10a      	bne.n	8003cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cd6:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <xPortStartScheduler+0x12c>)
 8003cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	22ff      	movs	r2, #255	; 0xff
 8003ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <xPortStartScheduler+0x130>)
 8003cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cfe:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d04:	e009      	b.n	8003d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	d0ef      	beq.n	8003d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00a      	beq.n	8003d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60bb      	str	r3, [r7, #8]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d48:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d52:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <xPortStartScheduler+0x134>)
 8003d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <xPortStartScheduler+0x138>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <xPortStartScheduler+0x138>)
 8003d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <xPortStartScheduler+0x138>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <xPortStartScheduler+0x138>)
 8003d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d7e:	f000 f8dd 	bl	8003f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <xPortStartScheduler+0x13c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d88:	f000 f8fc 	bl	8003f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d8c:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <xPortStartScheduler+0x140>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a0f      	ldr	r2, [pc, #60]	; (8003dd0 <xPortStartScheduler+0x140>)
 8003d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d98:	f7ff ff66 	bl	8003c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d9c:	f7ff fbbe 	bl	800351c <vTaskSwitchContext>
	prvTaskExitError();
 8003da0:	f7ff ff22 	bl	8003be8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	e000ed00 	.word	0xe000ed00
 8003db4:	410fc271 	.word	0x410fc271
 8003db8:	410fc270 	.word	0x410fc270
 8003dbc:	e000e400 	.word	0xe000e400
 8003dc0:	2000047c 	.word	0x2000047c
 8003dc4:	20000480 	.word	0x20000480
 8003dc8:	e000ed20 	.word	0xe000ed20
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	e000ef34 	.word	0xe000ef34

08003dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
}
 8003dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <vPortEnterCritical+0x58>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <vPortEnterCritical+0x58>)
 8003df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <vPortEnterCritical+0x58>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10f      	bne.n	8003e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <vPortEnterCritical+0x5c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <vPortEnterCritical+0x4a>
	}
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <vPortExitCritical+0x50>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <vPortExitCritical+0x24>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	607b      	str	r3, [r7, #4]
}
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <vPortExitCritical+0x50>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <vPortExitCritical+0x50>)
 8003e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <vPortExitCritical+0x50>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <vPortExitCritical+0x42>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f383 8811 	msr	BASEPRI, r3
}
 8003e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	2000000c 	.word	0x2000000c
	...

08003e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e90:	f3ef 8009 	mrs	r0, PSP
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <pxCurrentTCBConst>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f01e 0f10 	tst.w	lr, #16
 8003ea0:	bf08      	it	eq
 8003ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003eb4:	f380 8811 	msr	BASEPRI, r0
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f7ff fb2c 	bl	800351c <vTaskSwitchContext>
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f380 8811 	msr	BASEPRI, r0
 8003ecc:	bc09      	pop	{r0, r3}
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed6:	f01e 0f10 	tst.w	lr, #16
 8003eda:	bf08      	it	eq
 8003edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ee0:	f380 8809 	msr	PSP, r0
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst>:
 8003ef0:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop

08003ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	607b      	str	r3, [r7, #4]
}
 8003f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f12:	f7ff fa4b 	bl	80033ac <xTaskIncrementTick>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <SysTick_Handler+0x40>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f383 8811 	msr	BASEPRI, r3
}
 8003f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <vPortSetupTimerInterrupt+0x34>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <vPortSetupTimerInterrupt+0x38>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <vPortSetupTimerInterrupt+0x3c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <vPortSetupTimerInterrupt+0x40>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <vPortSetupTimerInterrupt+0x44>)
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f5e:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <vPortSetupTimerInterrupt+0x34>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000e010 	.word	0xe000e010
 8003f74:	e000e018 	.word	0xe000e018
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	10624dd3 	.word	0x10624dd3
 8003f80:	e000e014 	.word	0xe000e014

08003f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f94 <vPortEnableVFP+0x10>
 8003f88:	6801      	ldr	r1, [r0, #0]
 8003f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f8e:	6001      	str	r1, [r0, #0]
 8003f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f92:	bf00      	nop
 8003f94:	e000ed88 	.word	0xe000ed88

08003f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f9e:	f3ef 8305 	mrs	r3, IPSR
 8003fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d914      	bls.n	8003fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <vPortValidateInterruptPriority+0x70>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fb4:	4b15      	ldr	r3, [pc, #84]	; (800400c <vPortValidateInterruptPriority+0x74>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	7afa      	ldrb	r2, [r7, #11]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20a      	bcs.n	8003fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
}
 8003fd0:	bf00      	nop
 8003fd2:	e7fe      	b.n	8003fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <vPortValidateInterruptPriority+0x78>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <vPortValidateInterruptPriority+0x7c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d90a      	bls.n	8003ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	603b      	str	r3, [r7, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <vPortValidateInterruptPriority+0x60>
	}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000e3f0 	.word	0xe000e3f0
 800400c:	2000047c 	.word	0x2000047c
 8004010:	e000ed0c 	.word	0xe000ed0c
 8004014:	20000480 	.word	0x20000480

08004018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004024:	f7ff f88a 	bl	800313c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004028:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <pvPortMalloc+0x180>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004030:	f000 f920 	bl	8004274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004034:	4b59      	ldr	r3, [pc, #356]	; (800419c <pvPortMalloc+0x184>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 8093 	bne.w	8004168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01d      	beq.n	8004084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004048:	2208      	movs	r2, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	2b00      	cmp	r3, #0
 8004058:	d014      	beq.n	8004084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f023 0307 	bic.w	r3, r3, #7
 8004060:	3308      	adds	r3, #8
 8004062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <pvPortMalloc+0x6c>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	617b      	str	r3, [r7, #20]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06e      	beq.n	8004168 <pvPortMalloc+0x150>
 800408a:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <pvPortMalloc+0x188>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d869      	bhi.n	8004168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004094:	4b43      	ldr	r3, [pc, #268]	; (80041a4 <pvPortMalloc+0x18c>)
 8004096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <pvPortMalloc+0x18c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800409e:	e004      	b.n	80040aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d903      	bls.n	80040bc <pvPortMalloc+0xa4>
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f1      	bne.n	80040a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <pvPortMalloc+0x180>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d050      	beq.n	8004168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2208      	movs	r2, #8
 80040cc:	4413      	add	r3, r2
 80040ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	2308      	movs	r3, #8
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d91f      	bls.n	8004128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <pvPortMalloc+0xf8>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	613b      	str	r3, [r7, #16]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004122:	69b8      	ldr	r0, [r7, #24]
 8004124:	f000 f908 	bl	8004338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <pvPortMalloc+0x188>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <pvPortMalloc+0x188>)
 8004134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <pvPortMalloc+0x188>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <pvPortMalloc+0x190>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d203      	bcs.n	800414a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <pvPortMalloc+0x188>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <pvPortMalloc+0x190>)
 8004148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <pvPortMalloc+0x184>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	431a      	orrs	r2, r3
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <pvPortMalloc+0x194>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <pvPortMalloc+0x194>)
 8004166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004168:	f7fe fff6 	bl	8003158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <pvPortMalloc+0x174>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60fb      	str	r3, [r7, #12]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <pvPortMalloc+0x172>
	return pvReturn;
 800418c:	69fb      	ldr	r3, [r7, #28]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000408c 	.word	0x2000408c
 800419c:	200040a0 	.word	0x200040a0
 80041a0:	20004090 	.word	0x20004090
 80041a4:	20004084 	.word	0x20004084
 80041a8:	20004094 	.word	0x20004094
 80041ac:	20004098 	.word	0x20004098

080041b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04d      	beq.n	800425e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041c2:	2308      	movs	r3, #8
 80041c4:	425b      	negs	r3, r3
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <vPortFree+0xb8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <vPortFree+0x44>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60fb      	str	r3, [r7, #12]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <vPortFree+0x62>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60bb      	str	r3, [r7, #8]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <vPortFree+0xb8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01e      	beq.n	800425e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <vPortFree+0xb8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004238:	f7fe ff80 	bl	800313c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <vPortFree+0xbc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4413      	add	r3, r2
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <vPortFree+0xbc>)
 8004248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800424a:	6938      	ldr	r0, [r7, #16]
 800424c:	f000 f874 	bl	8004338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <vPortFree+0xc0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a06      	ldr	r2, [pc, #24]	; (8004270 <vPortFree+0xc0>)
 8004258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800425a:	f7fe ff7d 	bl	8003158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200040a0 	.word	0x200040a0
 800426c:	20004090 	.word	0x20004090
 8004270:	2000409c 	.word	0x2000409c

08004274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800427a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800427e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <prvHeapInit+0xac>)
 8004282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4a1f      	ldr	r2, [pc, #124]	; (8004320 <prvHeapInit+0xac>)
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <prvHeapInit+0xb0>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <prvHeapInit+0xb0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042c0:	2208      	movs	r2, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <prvHeapInit+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <prvHeapInit+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <prvHeapInit+0xb4>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvHeapInit+0xb8>)
 8004302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <prvHeapInit+0xbc>)
 800430a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvHeapInit+0xc0>)
 800430e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	20000484 	.word	0x20000484
 8004324:	20004084 	.word	0x20004084
 8004328:	2000408c 	.word	0x2000408c
 800432c:	20004094 	.word	0x20004094
 8004330:	20004090 	.word	0x20004090
 8004334:	200040a0 	.word	0x200040a0

08004338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e002      	b.n	800434c <prvInsertBlockIntoFreeList+0x14>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d8f7      	bhi.n	8004346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d108      	bne.n	800437a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d118      	bne.n	80043c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d00d      	beq.n	80043b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e008      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <prvInsertBlockIntoFreeList+0xb0>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e003      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d002      	beq.n	80043d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20004084 	.word	0x20004084
 80043e8:	2000408c 	.word	0x2000408c

080043ec <__errno>:
 80043ec:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <__errno+0x8>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000010 	.word	0x20000010

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4d0d      	ldr	r5, [pc, #52]	; (8004430 <__libc_init_array+0x38>)
 80043fc:	4c0d      	ldr	r4, [pc, #52]	; (8004434 <__libc_init_array+0x3c>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	2600      	movs	r6, #0
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	4d0b      	ldr	r5, [pc, #44]	; (8004438 <__libc_init_array+0x40>)
 800440a:	4c0c      	ldr	r4, [pc, #48]	; (800443c <__libc_init_array+0x44>)
 800440c:	f000 fcc0 	bl	8004d90 <_init>
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	2600      	movs	r6, #0
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	08004f30 	.word	0x08004f30
 8004434:	08004f30 	.word	0x08004f30
 8004438:	08004f30 	.word	0x08004f30
 800443c:	08004f34 	.word	0x08004f34

08004440 <__retarget_lock_acquire_recursive>:
 8004440:	4770      	bx	lr

08004442 <__retarget_lock_release_recursive>:
 8004442:	4770      	bx	lr

08004444 <memcpy>:
 8004444:	440a      	add	r2, r1
 8004446:	4291      	cmp	r1, r2
 8004448:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800444c:	d100      	bne.n	8004450 <memcpy+0xc>
 800444e:	4770      	bx	lr
 8004450:	b510      	push	{r4, lr}
 8004452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445a:	4291      	cmp	r1, r2
 800445c:	d1f9      	bne.n	8004452 <memcpy+0xe>
 800445e:	bd10      	pop	{r4, pc}

08004460 <memset>:
 8004460:	4402      	add	r2, r0
 8004462:	4603      	mov	r3, r0
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <memset+0xa>
 8004468:	4770      	bx	lr
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	e7f9      	b.n	8004464 <memset+0x4>

08004470 <_malloc_r>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	1ccd      	adds	r5, r1, #3
 8004474:	f025 0503 	bic.w	r5, r5, #3
 8004478:	3508      	adds	r5, #8
 800447a:	2d0c      	cmp	r5, #12
 800447c:	bf38      	it	cc
 800447e:	250c      	movcc	r5, #12
 8004480:	2d00      	cmp	r5, #0
 8004482:	4606      	mov	r6, r0
 8004484:	db01      	blt.n	800448a <_malloc_r+0x1a>
 8004486:	42a9      	cmp	r1, r5
 8004488:	d903      	bls.n	8004492 <_malloc_r+0x22>
 800448a:	230c      	movs	r3, #12
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	2000      	movs	r0, #0
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004492:	f000 f8e9 	bl	8004668 <__malloc_lock>
 8004496:	4921      	ldr	r1, [pc, #132]	; (800451c <_malloc_r+0xac>)
 8004498:	680a      	ldr	r2, [r1, #0]
 800449a:	4614      	mov	r4, r2
 800449c:	b99c      	cbnz	r4, 80044c6 <_malloc_r+0x56>
 800449e:	4f20      	ldr	r7, [pc, #128]	; (8004520 <_malloc_r+0xb0>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b923      	cbnz	r3, 80044ae <_malloc_r+0x3e>
 80044a4:	4621      	mov	r1, r4
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f8a6 	bl	80045f8 <_sbrk_r>
 80044ac:	6038      	str	r0, [r7, #0]
 80044ae:	4629      	mov	r1, r5
 80044b0:	4630      	mov	r0, r6
 80044b2:	f000 f8a1 	bl	80045f8 <_sbrk_r>
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	d123      	bne.n	8004502 <_malloc_r+0x92>
 80044ba:	230c      	movs	r3, #12
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f8d8 	bl	8004674 <__malloc_unlock>
 80044c4:	e7e3      	b.n	800448e <_malloc_r+0x1e>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	1b5b      	subs	r3, r3, r5
 80044ca:	d417      	bmi.n	80044fc <_malloc_r+0x8c>
 80044cc:	2b0b      	cmp	r3, #11
 80044ce:	d903      	bls.n	80044d8 <_malloc_r+0x68>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	441c      	add	r4, r3
 80044d4:	6025      	str	r5, [r4, #0]
 80044d6:	e004      	b.n	80044e2 <_malloc_r+0x72>
 80044d8:	6863      	ldr	r3, [r4, #4]
 80044da:	42a2      	cmp	r2, r4
 80044dc:	bf0c      	ite	eq
 80044de:	600b      	streq	r3, [r1, #0]
 80044e0:	6053      	strne	r3, [r2, #4]
 80044e2:	4630      	mov	r0, r6
 80044e4:	f000 f8c6 	bl	8004674 <__malloc_unlock>
 80044e8:	f104 000b 	add.w	r0, r4, #11
 80044ec:	1d23      	adds	r3, r4, #4
 80044ee:	f020 0007 	bic.w	r0, r0, #7
 80044f2:	1ac2      	subs	r2, r0, r3
 80044f4:	d0cc      	beq.n	8004490 <_malloc_r+0x20>
 80044f6:	1a1b      	subs	r3, r3, r0
 80044f8:	50a3      	str	r3, [r4, r2]
 80044fa:	e7c9      	b.n	8004490 <_malloc_r+0x20>
 80044fc:	4622      	mov	r2, r4
 80044fe:	6864      	ldr	r4, [r4, #4]
 8004500:	e7cc      	b.n	800449c <_malloc_r+0x2c>
 8004502:	1cc4      	adds	r4, r0, #3
 8004504:	f024 0403 	bic.w	r4, r4, #3
 8004508:	42a0      	cmp	r0, r4
 800450a:	d0e3      	beq.n	80044d4 <_malloc_r+0x64>
 800450c:	1a21      	subs	r1, r4, r0
 800450e:	4630      	mov	r0, r6
 8004510:	f000 f872 	bl	80045f8 <_sbrk_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d1dd      	bne.n	80044d4 <_malloc_r+0x64>
 8004518:	e7cf      	b.n	80044ba <_malloc_r+0x4a>
 800451a:	bf00      	nop
 800451c:	200040a4 	.word	0x200040a4
 8004520:	200040a8 	.word	0x200040a8

08004524 <cleanup_glue>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	460c      	mov	r4, r1
 8004528:	6809      	ldr	r1, [r1, #0]
 800452a:	4605      	mov	r5, r0
 800452c:	b109      	cbz	r1, 8004532 <cleanup_glue+0xe>
 800452e:	f7ff fff9 	bl	8004524 <cleanup_glue>
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800453a:	f000 b8a1 	b.w	8004680 <_free_r>
	...

08004540 <_reclaim_reent>:
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <_reclaim_reent+0xb4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4283      	cmp	r3, r0
 8004546:	b570      	push	{r4, r5, r6, lr}
 8004548:	4604      	mov	r4, r0
 800454a:	d051      	beq.n	80045f0 <_reclaim_reent+0xb0>
 800454c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800454e:	b143      	cbz	r3, 8004562 <_reclaim_reent+0x22>
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d14a      	bne.n	80045ec <_reclaim_reent+0xac>
 8004556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	b111      	cbz	r1, 8004562 <_reclaim_reent+0x22>
 800455c:	4620      	mov	r0, r4
 800455e:	f000 f88f 	bl	8004680 <_free_r>
 8004562:	6961      	ldr	r1, [r4, #20]
 8004564:	b111      	cbz	r1, 800456c <_reclaim_reent+0x2c>
 8004566:	4620      	mov	r0, r4
 8004568:	f000 f88a 	bl	8004680 <_free_r>
 800456c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800456e:	b111      	cbz	r1, 8004576 <_reclaim_reent+0x36>
 8004570:	4620      	mov	r0, r4
 8004572:	f000 f885 	bl	8004680 <_free_r>
 8004576:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004578:	b111      	cbz	r1, 8004580 <_reclaim_reent+0x40>
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f880 	bl	8004680 <_free_r>
 8004580:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004582:	b111      	cbz	r1, 800458a <_reclaim_reent+0x4a>
 8004584:	4620      	mov	r0, r4
 8004586:	f000 f87b 	bl	8004680 <_free_r>
 800458a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800458c:	b111      	cbz	r1, 8004594 <_reclaim_reent+0x54>
 800458e:	4620      	mov	r0, r4
 8004590:	f000 f876 	bl	8004680 <_free_r>
 8004594:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004596:	b111      	cbz	r1, 800459e <_reclaim_reent+0x5e>
 8004598:	4620      	mov	r0, r4
 800459a:	f000 f871 	bl	8004680 <_free_r>
 800459e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80045a0:	b111      	cbz	r1, 80045a8 <_reclaim_reent+0x68>
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 f86c 	bl	8004680 <_free_r>
 80045a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045aa:	b111      	cbz	r1, 80045b2 <_reclaim_reent+0x72>
 80045ac:	4620      	mov	r0, r4
 80045ae:	f000 f867 	bl	8004680 <_free_r>
 80045b2:	69a3      	ldr	r3, [r4, #24]
 80045b4:	b1e3      	cbz	r3, 80045f0 <_reclaim_reent+0xb0>
 80045b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045b8:	4620      	mov	r0, r4
 80045ba:	4798      	blx	r3
 80045bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80045be:	b1b9      	cbz	r1, 80045f0 <_reclaim_reent+0xb0>
 80045c0:	4620      	mov	r0, r4
 80045c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045c6:	f7ff bfad 	b.w	8004524 <cleanup_glue>
 80045ca:	5949      	ldr	r1, [r1, r5]
 80045cc:	b941      	cbnz	r1, 80045e0 <_reclaim_reent+0xa0>
 80045ce:	3504      	adds	r5, #4
 80045d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d2:	2d80      	cmp	r5, #128	; 0x80
 80045d4:	68d9      	ldr	r1, [r3, #12]
 80045d6:	d1f8      	bne.n	80045ca <_reclaim_reent+0x8a>
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 f851 	bl	8004680 <_free_r>
 80045de:	e7ba      	b.n	8004556 <_reclaim_reent+0x16>
 80045e0:	680e      	ldr	r6, [r1, #0]
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 f84c 	bl	8004680 <_free_r>
 80045e8:	4631      	mov	r1, r6
 80045ea:	e7ef      	b.n	80045cc <_reclaim_reent+0x8c>
 80045ec:	2500      	movs	r5, #0
 80045ee:	e7ef      	b.n	80045d0 <_reclaim_reent+0x90>
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	bf00      	nop
 80045f4:	20000010 	.word	0x20000010

080045f8 <_sbrk_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d06      	ldr	r5, [pc, #24]	; (8004614 <_sbrk_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fc f9ea 	bl	80009dc <_sbrk>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_sbrk_r+0x1a>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_sbrk_r+0x1a>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20004154 	.word	0x20004154

08004618 <siprintf>:
 8004618:	b40e      	push	{r1, r2, r3}
 800461a:	b500      	push	{lr}
 800461c:	b09c      	sub	sp, #112	; 0x70
 800461e:	ab1d      	add	r3, sp, #116	; 0x74
 8004620:	9002      	str	r0, [sp, #8]
 8004622:	9006      	str	r0, [sp, #24]
 8004624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004628:	4809      	ldr	r0, [pc, #36]	; (8004650 <siprintf+0x38>)
 800462a:	9107      	str	r1, [sp, #28]
 800462c:	9104      	str	r1, [sp, #16]
 800462e:	4909      	ldr	r1, [pc, #36]	; (8004654 <siprintf+0x3c>)
 8004630:	f853 2b04 	ldr.w	r2, [r3], #4
 8004634:	9105      	str	r1, [sp, #20]
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	a902      	add	r1, sp, #8
 800463c:	f000 f8cc 	bl	80047d8 <_svfiprintf_r>
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	b01c      	add	sp, #112	; 0x70
 8004648:	f85d eb04 	ldr.w	lr, [sp], #4
 800464c:	b003      	add	sp, #12
 800464e:	4770      	bx	lr
 8004650:	20000010 	.word	0x20000010
 8004654:	ffff0208 	.word	0xffff0208

08004658 <strcpy>:
 8004658:	4603      	mov	r3, r0
 800465a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465e:	f803 2b01 	strb.w	r2, [r3], #1
 8004662:	2a00      	cmp	r2, #0
 8004664:	d1f9      	bne.n	800465a <strcpy+0x2>
 8004666:	4770      	bx	lr

08004668 <__malloc_lock>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <__malloc_lock+0x8>)
 800466a:	f7ff bee9 	b.w	8004440 <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	2000414c 	.word	0x2000414c

08004674 <__malloc_unlock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_unlock+0x8>)
 8004676:	f7ff bee4 	b.w	8004442 <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	2000414c 	.word	0x2000414c

08004680 <_free_r>:
 8004680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004682:	2900      	cmp	r1, #0
 8004684:	d048      	beq.n	8004718 <_free_r+0x98>
 8004686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800468a:	9001      	str	r0, [sp, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f1a1 0404 	sub.w	r4, r1, #4
 8004692:	bfb8      	it	lt
 8004694:	18e4      	addlt	r4, r4, r3
 8004696:	f7ff ffe7 	bl	8004668 <__malloc_lock>
 800469a:	4a20      	ldr	r2, [pc, #128]	; (800471c <_free_r+0x9c>)
 800469c:	9801      	ldr	r0, [sp, #4]
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	4615      	mov	r5, r2
 80046a2:	b933      	cbnz	r3, 80046b2 <_free_r+0x32>
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	6014      	str	r4, [r2, #0]
 80046a8:	b003      	add	sp, #12
 80046aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046ae:	f7ff bfe1 	b.w	8004674 <__malloc_unlock>
 80046b2:	42a3      	cmp	r3, r4
 80046b4:	d90b      	bls.n	80046ce <_free_r+0x4e>
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	1862      	adds	r2, r4, r1
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bf04      	itt	eq
 80046be:	681a      	ldreq	r2, [r3, #0]
 80046c0:	685b      	ldreq	r3, [r3, #4]
 80046c2:	6063      	str	r3, [r4, #4]
 80046c4:	bf04      	itt	eq
 80046c6:	1852      	addeq	r2, r2, r1
 80046c8:	6022      	streq	r2, [r4, #0]
 80046ca:	602c      	str	r4, [r5, #0]
 80046cc:	e7ec      	b.n	80046a8 <_free_r+0x28>
 80046ce:	461a      	mov	r2, r3
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b10b      	cbz	r3, 80046d8 <_free_r+0x58>
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d9fa      	bls.n	80046ce <_free_r+0x4e>
 80046d8:	6811      	ldr	r1, [r2, #0]
 80046da:	1855      	adds	r5, r2, r1
 80046dc:	42a5      	cmp	r5, r4
 80046de:	d10b      	bne.n	80046f8 <_free_r+0x78>
 80046e0:	6824      	ldr	r4, [r4, #0]
 80046e2:	4421      	add	r1, r4
 80046e4:	1854      	adds	r4, r2, r1
 80046e6:	42a3      	cmp	r3, r4
 80046e8:	6011      	str	r1, [r2, #0]
 80046ea:	d1dd      	bne.n	80046a8 <_free_r+0x28>
 80046ec:	681c      	ldr	r4, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	6053      	str	r3, [r2, #4]
 80046f2:	4421      	add	r1, r4
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	e7d7      	b.n	80046a8 <_free_r+0x28>
 80046f8:	d902      	bls.n	8004700 <_free_r+0x80>
 80046fa:	230c      	movs	r3, #12
 80046fc:	6003      	str	r3, [r0, #0]
 80046fe:	e7d3      	b.n	80046a8 <_free_r+0x28>
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	1961      	adds	r1, r4, r5
 8004704:	428b      	cmp	r3, r1
 8004706:	bf04      	itt	eq
 8004708:	6819      	ldreq	r1, [r3, #0]
 800470a:	685b      	ldreq	r3, [r3, #4]
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	bf04      	itt	eq
 8004710:	1949      	addeq	r1, r1, r5
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	6054      	str	r4, [r2, #4]
 8004716:	e7c7      	b.n	80046a8 <_free_r+0x28>
 8004718:	b003      	add	sp, #12
 800471a:	bd30      	pop	{r4, r5, pc}
 800471c:	200040a4 	.word	0x200040a4

08004720 <__ssputs_r>:
 8004720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	688e      	ldr	r6, [r1, #8]
 8004726:	429e      	cmp	r6, r3
 8004728:	4682      	mov	sl, r0
 800472a:	460c      	mov	r4, r1
 800472c:	4690      	mov	r8, r2
 800472e:	461f      	mov	r7, r3
 8004730:	d838      	bhi.n	80047a4 <__ssputs_r+0x84>
 8004732:	898a      	ldrh	r2, [r1, #12]
 8004734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004738:	d032      	beq.n	80047a0 <__ssputs_r+0x80>
 800473a:	6825      	ldr	r5, [r4, #0]
 800473c:	6909      	ldr	r1, [r1, #16]
 800473e:	eba5 0901 	sub.w	r9, r5, r1
 8004742:	6965      	ldr	r5, [r4, #20]
 8004744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800474c:	3301      	adds	r3, #1
 800474e:	444b      	add	r3, r9
 8004750:	106d      	asrs	r5, r5, #1
 8004752:	429d      	cmp	r5, r3
 8004754:	bf38      	it	cc
 8004756:	461d      	movcc	r5, r3
 8004758:	0553      	lsls	r3, r2, #21
 800475a:	d531      	bpl.n	80047c0 <__ssputs_r+0xa0>
 800475c:	4629      	mov	r1, r5
 800475e:	f7ff fe87 	bl	8004470 <_malloc_r>
 8004762:	4606      	mov	r6, r0
 8004764:	b950      	cbnz	r0, 800477c <__ssputs_r+0x5c>
 8004766:	230c      	movs	r3, #12
 8004768:	f8ca 3000 	str.w	r3, [sl]
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	464a      	mov	r2, r9
 8004780:	f7ff fe60 	bl	8004444 <memcpy>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	6126      	str	r6, [r4, #16]
 8004792:	6165      	str	r5, [r4, #20]
 8004794:	444e      	add	r6, r9
 8004796:	eba5 0509 	sub.w	r5, r5, r9
 800479a:	6026      	str	r6, [r4, #0]
 800479c:	60a5      	str	r5, [r4, #8]
 800479e:	463e      	mov	r6, r7
 80047a0:	42be      	cmp	r6, r7
 80047a2:	d900      	bls.n	80047a6 <__ssputs_r+0x86>
 80047a4:	463e      	mov	r6, r7
 80047a6:	4632      	mov	r2, r6
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	4641      	mov	r1, r8
 80047ac:	f000 faa8 	bl	8004d00 <memmove>
 80047b0:	68a3      	ldr	r3, [r4, #8]
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	1b9b      	subs	r3, r3, r6
 80047b6:	4432      	add	r2, r6
 80047b8:	60a3      	str	r3, [r4, #8]
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	2000      	movs	r0, #0
 80047be:	e7db      	b.n	8004778 <__ssputs_r+0x58>
 80047c0:	462a      	mov	r2, r5
 80047c2:	f000 fab7 	bl	8004d34 <_realloc_r>
 80047c6:	4606      	mov	r6, r0
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d1e1      	bne.n	8004790 <__ssputs_r+0x70>
 80047cc:	6921      	ldr	r1, [r4, #16]
 80047ce:	4650      	mov	r0, sl
 80047d0:	f7ff ff56 	bl	8004680 <_free_r>
 80047d4:	e7c7      	b.n	8004766 <__ssputs_r+0x46>
	...

080047d8 <_svfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	4698      	mov	r8, r3
 80047de:	898b      	ldrh	r3, [r1, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	b09d      	sub	sp, #116	; 0x74
 80047e4:	4607      	mov	r7, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	d50e      	bpl.n	800480a <_svfiprintf_r+0x32>
 80047ec:	690b      	ldr	r3, [r1, #16]
 80047ee:	b963      	cbnz	r3, 800480a <_svfiprintf_r+0x32>
 80047f0:	2140      	movs	r1, #64	; 0x40
 80047f2:	f7ff fe3d 	bl	8004470 <_malloc_r>
 80047f6:	6028      	str	r0, [r5, #0]
 80047f8:	6128      	str	r0, [r5, #16]
 80047fa:	b920      	cbnz	r0, 8004806 <_svfiprintf_r+0x2e>
 80047fc:	230c      	movs	r3, #12
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004804:	e0d1      	b.n	80049aa <_svfiprintf_r+0x1d2>
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	616b      	str	r3, [r5, #20]
 800480a:	2300      	movs	r3, #0
 800480c:	9309      	str	r3, [sp, #36]	; 0x24
 800480e:	2320      	movs	r3, #32
 8004810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004814:	f8cd 800c 	str.w	r8, [sp, #12]
 8004818:	2330      	movs	r3, #48	; 0x30
 800481a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049c4 <_svfiprintf_r+0x1ec>
 800481e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004822:	f04f 0901 	mov.w	r9, #1
 8004826:	4623      	mov	r3, r4
 8004828:	469a      	mov	sl, r3
 800482a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800482e:	b10a      	cbz	r2, 8004834 <_svfiprintf_r+0x5c>
 8004830:	2a25      	cmp	r2, #37	; 0x25
 8004832:	d1f9      	bne.n	8004828 <_svfiprintf_r+0x50>
 8004834:	ebba 0b04 	subs.w	fp, sl, r4
 8004838:	d00b      	beq.n	8004852 <_svfiprintf_r+0x7a>
 800483a:	465b      	mov	r3, fp
 800483c:	4622      	mov	r2, r4
 800483e:	4629      	mov	r1, r5
 8004840:	4638      	mov	r0, r7
 8004842:	f7ff ff6d 	bl	8004720 <__ssputs_r>
 8004846:	3001      	adds	r0, #1
 8004848:	f000 80aa 	beq.w	80049a0 <_svfiprintf_r+0x1c8>
 800484c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800484e:	445a      	add	r2, fp
 8004850:	9209      	str	r2, [sp, #36]	; 0x24
 8004852:	f89a 3000 	ldrb.w	r3, [sl]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80a2 	beq.w	80049a0 <_svfiprintf_r+0x1c8>
 800485c:	2300      	movs	r3, #0
 800485e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004866:	f10a 0a01 	add.w	sl, sl, #1
 800486a:	9304      	str	r3, [sp, #16]
 800486c:	9307      	str	r3, [sp, #28]
 800486e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004872:	931a      	str	r3, [sp, #104]	; 0x68
 8004874:	4654      	mov	r4, sl
 8004876:	2205      	movs	r2, #5
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	4851      	ldr	r0, [pc, #324]	; (80049c4 <_svfiprintf_r+0x1ec>)
 800487e:	f7fb fcaf 	bl	80001e0 <memchr>
 8004882:	9a04      	ldr	r2, [sp, #16]
 8004884:	b9d8      	cbnz	r0, 80048be <_svfiprintf_r+0xe6>
 8004886:	06d0      	lsls	r0, r2, #27
 8004888:	bf44      	itt	mi
 800488a:	2320      	movmi	r3, #32
 800488c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004890:	0711      	lsls	r1, r2, #28
 8004892:	bf44      	itt	mi
 8004894:	232b      	movmi	r3, #43	; 0x2b
 8004896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489a:	f89a 3000 	ldrb.w	r3, [sl]
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d015      	beq.n	80048ce <_svfiprintf_r+0xf6>
 80048a2:	9a07      	ldr	r2, [sp, #28]
 80048a4:	4654      	mov	r4, sl
 80048a6:	2000      	movs	r0, #0
 80048a8:	f04f 0c0a 	mov.w	ip, #10
 80048ac:	4621      	mov	r1, r4
 80048ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048b2:	3b30      	subs	r3, #48	; 0x30
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	d94e      	bls.n	8004956 <_svfiprintf_r+0x17e>
 80048b8:	b1b0      	cbz	r0, 80048e8 <_svfiprintf_r+0x110>
 80048ba:	9207      	str	r2, [sp, #28]
 80048bc:	e014      	b.n	80048e8 <_svfiprintf_r+0x110>
 80048be:	eba0 0308 	sub.w	r3, r0, r8
 80048c2:	fa09 f303 	lsl.w	r3, r9, r3
 80048c6:	4313      	orrs	r3, r2
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	46a2      	mov	sl, r4
 80048cc:	e7d2      	b.n	8004874 <_svfiprintf_r+0x9c>
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	1d19      	adds	r1, r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	9103      	str	r1, [sp, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfbb      	ittet	lt
 80048da:	425b      	neglt	r3, r3
 80048dc:	f042 0202 	orrlt.w	r2, r2, #2
 80048e0:	9307      	strge	r3, [sp, #28]
 80048e2:	9307      	strlt	r3, [sp, #28]
 80048e4:	bfb8      	it	lt
 80048e6:	9204      	strlt	r2, [sp, #16]
 80048e8:	7823      	ldrb	r3, [r4, #0]
 80048ea:	2b2e      	cmp	r3, #46	; 0x2e
 80048ec:	d10c      	bne.n	8004908 <_svfiprintf_r+0x130>
 80048ee:	7863      	ldrb	r3, [r4, #1]
 80048f0:	2b2a      	cmp	r3, #42	; 0x2a
 80048f2:	d135      	bne.n	8004960 <_svfiprintf_r+0x188>
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	9203      	str	r2, [sp, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bfb8      	it	lt
 8004900:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004904:	3402      	adds	r4, #2
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049d4 <_svfiprintf_r+0x1fc>
 800490c:	7821      	ldrb	r1, [r4, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	4650      	mov	r0, sl
 8004912:	f7fb fc65 	bl	80001e0 <memchr>
 8004916:	b140      	cbz	r0, 800492a <_svfiprintf_r+0x152>
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	eba0 000a 	sub.w	r0, r0, sl
 800491e:	fa03 f000 	lsl.w	r0, r3, r0
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	4303      	orrs	r3, r0
 8004926:	3401      	adds	r4, #1
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492e:	4826      	ldr	r0, [pc, #152]	; (80049c8 <_svfiprintf_r+0x1f0>)
 8004930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004934:	2206      	movs	r2, #6
 8004936:	f7fb fc53 	bl	80001e0 <memchr>
 800493a:	2800      	cmp	r0, #0
 800493c:	d038      	beq.n	80049b0 <_svfiprintf_r+0x1d8>
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <_svfiprintf_r+0x1f4>)
 8004940:	bb1b      	cbnz	r3, 800498a <_svfiprintf_r+0x1b2>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	3307      	adds	r3, #7
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	3308      	adds	r3, #8
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	4433      	add	r3, r6
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	e767      	b.n	8004826 <_svfiprintf_r+0x4e>
 8004956:	fb0c 3202 	mla	r2, ip, r2, r3
 800495a:	460c      	mov	r4, r1
 800495c:	2001      	movs	r0, #1
 800495e:	e7a5      	b.n	80048ac <_svfiprintf_r+0xd4>
 8004960:	2300      	movs	r3, #0
 8004962:	3401      	adds	r4, #1
 8004964:	9305      	str	r3, [sp, #20]
 8004966:	4619      	mov	r1, r3
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4620      	mov	r0, r4
 800496e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004972:	3a30      	subs	r2, #48	; 0x30
 8004974:	2a09      	cmp	r2, #9
 8004976:	d903      	bls.n	8004980 <_svfiprintf_r+0x1a8>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0c5      	beq.n	8004908 <_svfiprintf_r+0x130>
 800497c:	9105      	str	r1, [sp, #20]
 800497e:	e7c3      	b.n	8004908 <_svfiprintf_r+0x130>
 8004980:	fb0c 2101 	mla	r1, ip, r1, r2
 8004984:	4604      	mov	r4, r0
 8004986:	2301      	movs	r3, #1
 8004988:	e7f0      	b.n	800496c <_svfiprintf_r+0x194>
 800498a:	ab03      	add	r3, sp, #12
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	462a      	mov	r2, r5
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <_svfiprintf_r+0x1f8>)
 8004992:	a904      	add	r1, sp, #16
 8004994:	4638      	mov	r0, r7
 8004996:	f3af 8000 	nop.w
 800499a:	1c42      	adds	r2, r0, #1
 800499c:	4606      	mov	r6, r0
 800499e:	d1d6      	bne.n	800494e <_svfiprintf_r+0x176>
 80049a0:	89ab      	ldrh	r3, [r5, #12]
 80049a2:	065b      	lsls	r3, r3, #25
 80049a4:	f53f af2c 	bmi.w	8004800 <_svfiprintf_r+0x28>
 80049a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049aa:	b01d      	add	sp, #116	; 0x74
 80049ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b0:	ab03      	add	r3, sp, #12
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	462a      	mov	r2, r5
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <_svfiprintf_r+0x1f8>)
 80049b8:	a904      	add	r1, sp, #16
 80049ba:	4638      	mov	r0, r7
 80049bc:	f000 f87a 	bl	8004ab4 <_printf_i>
 80049c0:	e7eb      	b.n	800499a <_svfiprintf_r+0x1c2>
 80049c2:	bf00      	nop
 80049c4:	08004ef4 	.word	0x08004ef4
 80049c8:	08004efe 	.word	0x08004efe
 80049cc:	00000000 	.word	0x00000000
 80049d0:	08004721 	.word	0x08004721
 80049d4:	08004efa 	.word	0x08004efa

080049d8 <_printf_common>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	4616      	mov	r6, r2
 80049de:	4699      	mov	r9, r3
 80049e0:	688a      	ldr	r2, [r1, #8]
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bfb8      	it	lt
 80049ec:	4613      	movlt	r3, r2
 80049ee:	6033      	str	r3, [r6, #0]
 80049f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f4:	4607      	mov	r7, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	b10a      	cbz	r2, 80049fe <_printf_common+0x26>
 80049fa:	3301      	adds	r3, #1
 80049fc:	6033      	str	r3, [r6, #0]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	0699      	lsls	r1, r3, #26
 8004a02:	bf42      	ittt	mi
 8004a04:	6833      	ldrmi	r3, [r6, #0]
 8004a06:	3302      	addmi	r3, #2
 8004a08:	6033      	strmi	r3, [r6, #0]
 8004a0a:	6825      	ldr	r5, [r4, #0]
 8004a0c:	f015 0506 	ands.w	r5, r5, #6
 8004a10:	d106      	bne.n	8004a20 <_printf_common+0x48>
 8004a12:	f104 0a19 	add.w	sl, r4, #25
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	6832      	ldr	r2, [r6, #0]
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	dc26      	bgt.n	8004a6e <_printf_common+0x96>
 8004a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a24:	1e13      	subs	r3, r2, #0
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	bf18      	it	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	0692      	lsls	r2, r2, #26
 8004a2e:	d42b      	bmi.n	8004a88 <_printf_common+0xb0>
 8004a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a34:	4649      	mov	r1, r9
 8004a36:	4638      	mov	r0, r7
 8004a38:	47c0      	blx	r8
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d01e      	beq.n	8004a7c <_printf_common+0xa4>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	68e5      	ldr	r5, [r4, #12]
 8004a42:	6832      	ldr	r2, [r6, #0]
 8004a44:	f003 0306 	and.w	r3, r3, #6
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	bf08      	it	eq
 8004a4c:	1aad      	subeq	r5, r5, r2
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	6922      	ldr	r2, [r4, #16]
 8004a52:	bf0c      	ite	eq
 8004a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a58:	2500      	movne	r5, #0
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	bfc4      	itt	gt
 8004a5e:	1a9b      	subgt	r3, r3, r2
 8004a60:	18ed      	addgt	r5, r5, r3
 8004a62:	2600      	movs	r6, #0
 8004a64:	341a      	adds	r4, #26
 8004a66:	42b5      	cmp	r5, r6
 8004a68:	d11a      	bne.n	8004aa0 <_printf_common+0xc8>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e008      	b.n	8004a80 <_printf_common+0xa8>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4652      	mov	r2, sl
 8004a72:	4649      	mov	r1, r9
 8004a74:	4638      	mov	r0, r7
 8004a76:	47c0      	blx	r8
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d103      	bne.n	8004a84 <_printf_common+0xac>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	3501      	adds	r5, #1
 8004a86:	e7c6      	b.n	8004a16 <_printf_common+0x3e>
 8004a88:	18e1      	adds	r1, r4, r3
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	2030      	movs	r0, #48	; 0x30
 8004a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a92:	4422      	add	r2, r4
 8004a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	e7c7      	b.n	8004a30 <_printf_common+0x58>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	47c0      	blx	r8
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d0e6      	beq.n	8004a7c <_printf_common+0xa4>
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7d9      	b.n	8004a66 <_printf_common+0x8e>
	...

08004ab4 <_printf_i>:
 8004ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	460c      	mov	r4, r1
 8004aba:	4691      	mov	r9, r2
 8004abc:	7e27      	ldrb	r7, [r4, #24]
 8004abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ac0:	2f78      	cmp	r7, #120	; 0x78
 8004ac2:	4680      	mov	r8, r0
 8004ac4:	469a      	mov	sl, r3
 8004ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aca:	d807      	bhi.n	8004adc <_printf_i+0x28>
 8004acc:	2f62      	cmp	r7, #98	; 0x62
 8004ace:	d80a      	bhi.n	8004ae6 <_printf_i+0x32>
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	f000 80d8 	beq.w	8004c86 <_printf_i+0x1d2>
 8004ad6:	2f58      	cmp	r7, #88	; 0x58
 8004ad8:	f000 80a3 	beq.w	8004c22 <_printf_i+0x16e>
 8004adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ae4:	e03a      	b.n	8004b5c <_printf_i+0xa8>
 8004ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aea:	2b15      	cmp	r3, #21
 8004aec:	d8f6      	bhi.n	8004adc <_printf_i+0x28>
 8004aee:	a001      	add	r0, pc, #4	; (adr r0, 8004af4 <_printf_i+0x40>)
 8004af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004add 	.word	0x08004add
 8004b00:	08004add 	.word	0x08004add
 8004b04:	08004add 	.word	0x08004add
 8004b08:	08004add 	.word	0x08004add
 8004b0c:	08004b61 	.word	0x08004b61
 8004b10:	08004add 	.word	0x08004add
 8004b14:	08004add 	.word	0x08004add
 8004b18:	08004add 	.word	0x08004add
 8004b1c:	08004add 	.word	0x08004add
 8004b20:	08004c6d 	.word	0x08004c6d
 8004b24:	08004b91 	.word	0x08004b91
 8004b28:	08004c4f 	.word	0x08004c4f
 8004b2c:	08004add 	.word	0x08004add
 8004b30:	08004add 	.word	0x08004add
 8004b34:	08004c8f 	.word	0x08004c8f
 8004b38:	08004add 	.word	0x08004add
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004add 	.word	0x08004add
 8004b44:	08004add 	.word	0x08004add
 8004b48:	08004c57 	.word	0x08004c57
 8004b4c:	680b      	ldr	r3, [r1, #0]
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	600a      	str	r2, [r1, #0]
 8004b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a3      	b.n	8004ca8 <_printf_i+0x1f4>
 8004b60:	6825      	ldr	r5, [r4, #0]
 8004b62:	6808      	ldr	r0, [r1, #0]
 8004b64:	062e      	lsls	r6, r5, #24
 8004b66:	f100 0304 	add.w	r3, r0, #4
 8004b6a:	d50a      	bpl.n	8004b82 <_printf_i+0xce>
 8004b6c:	6805      	ldr	r5, [r0, #0]
 8004b6e:	600b      	str	r3, [r1, #0]
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	da03      	bge.n	8004b7c <_printf_i+0xc8>
 8004b74:	232d      	movs	r3, #45	; 0x2d
 8004b76:	426d      	negs	r5, r5
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7c:	485e      	ldr	r0, [pc, #376]	; (8004cf8 <_printf_i+0x244>)
 8004b7e:	230a      	movs	r3, #10
 8004b80:	e019      	b.n	8004bb6 <_printf_i+0x102>
 8004b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b86:	6805      	ldr	r5, [r0, #0]
 8004b88:	600b      	str	r3, [r1, #0]
 8004b8a:	bf18      	it	ne
 8004b8c:	b22d      	sxthne	r5, r5
 8004b8e:	e7ef      	b.n	8004b70 <_printf_i+0xbc>
 8004b90:	680b      	ldr	r3, [r1, #0]
 8004b92:	6825      	ldr	r5, [r4, #0]
 8004b94:	1d18      	adds	r0, r3, #4
 8004b96:	6008      	str	r0, [r1, #0]
 8004b98:	0628      	lsls	r0, r5, #24
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0xec>
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <_printf_i+0xf2>
 8004ba0:	0669      	lsls	r1, r5, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0xe8>
 8004ba4:	881d      	ldrh	r5, [r3, #0]
 8004ba6:	4854      	ldr	r0, [pc, #336]	; (8004cf8 <_printf_i+0x244>)
 8004ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8004baa:	bf0c      	ite	eq
 8004bac:	2308      	moveq	r3, #8
 8004bae:	230a      	movne	r3, #10
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bb6:	6866      	ldr	r6, [r4, #4]
 8004bb8:	60a6      	str	r6, [r4, #8]
 8004bba:	2e00      	cmp	r6, #0
 8004bbc:	bfa2      	ittt	ge
 8004bbe:	6821      	ldrge	r1, [r4, #0]
 8004bc0:	f021 0104 	bicge.w	r1, r1, #4
 8004bc4:	6021      	strge	r1, [r4, #0]
 8004bc6:	b90d      	cbnz	r5, 8004bcc <_printf_i+0x118>
 8004bc8:	2e00      	cmp	r6, #0
 8004bca:	d04d      	beq.n	8004c68 <_printf_i+0x1b4>
 8004bcc:	4616      	mov	r6, r2
 8004bce:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bd2:	fb03 5711 	mls	r7, r3, r1, r5
 8004bd6:	5dc7      	ldrb	r7, [r0, r7]
 8004bd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bdc:	462f      	mov	r7, r5
 8004bde:	42bb      	cmp	r3, r7
 8004be0:	460d      	mov	r5, r1
 8004be2:	d9f4      	bls.n	8004bce <_printf_i+0x11a>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d10b      	bne.n	8004c00 <_printf_i+0x14c>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	07df      	lsls	r7, r3, #31
 8004bec:	d508      	bpl.n	8004c00 <_printf_i+0x14c>
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	6861      	ldr	r1, [r4, #4]
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	bfde      	ittt	le
 8004bf6:	2330      	movle	r3, #48	; 0x30
 8004bf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bfc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004c00:	1b92      	subs	r2, r2, r6
 8004c02:	6122      	str	r2, [r4, #16]
 8004c04:	f8cd a000 	str.w	sl, [sp]
 8004c08:	464b      	mov	r3, r9
 8004c0a:	aa03      	add	r2, sp, #12
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f7ff fee2 	bl	80049d8 <_printf_common>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d14c      	bne.n	8004cb2 <_printf_i+0x1fe>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c1c:	b004      	add	sp, #16
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	4835      	ldr	r0, [pc, #212]	; (8004cf8 <_printf_i+0x244>)
 8004c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	680e      	ldr	r6, [r1, #0]
 8004c2c:	061f      	lsls	r7, r3, #24
 8004c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c32:	600e      	str	r6, [r1, #0]
 8004c34:	d514      	bpl.n	8004c60 <_printf_i+0x1ac>
 8004c36:	07d9      	lsls	r1, r3, #31
 8004c38:	bf44      	itt	mi
 8004c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c3e:	6023      	strmi	r3, [r4, #0]
 8004c40:	b91d      	cbnz	r5, 8004c4a <_printf_i+0x196>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	f023 0320 	bic.w	r3, r3, #32
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	e7b0      	b.n	8004bb0 <_printf_i+0xfc>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f043 0320 	orr.w	r3, r3, #32
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	2378      	movs	r3, #120	; 0x78
 8004c58:	4828      	ldr	r0, [pc, #160]	; (8004cfc <_printf_i+0x248>)
 8004c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c5e:	e7e3      	b.n	8004c28 <_printf_i+0x174>
 8004c60:	065e      	lsls	r6, r3, #25
 8004c62:	bf48      	it	mi
 8004c64:	b2ad      	uxthmi	r5, r5
 8004c66:	e7e6      	b.n	8004c36 <_printf_i+0x182>
 8004c68:	4616      	mov	r6, r2
 8004c6a:	e7bb      	b.n	8004be4 <_printf_i+0x130>
 8004c6c:	680b      	ldr	r3, [r1, #0]
 8004c6e:	6826      	ldr	r6, [r4, #0]
 8004c70:	6960      	ldr	r0, [r4, #20]
 8004c72:	1d1d      	adds	r5, r3, #4
 8004c74:	600d      	str	r5, [r1, #0]
 8004c76:	0635      	lsls	r5, r6, #24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0x1cc>
 8004c7c:	6018      	str	r0, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <_printf_i+0x1d2>
 8004c80:	0671      	lsls	r1, r6, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0x1c8>
 8004c84:	8018      	strh	r0, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	4616      	mov	r6, r2
 8004c8c:	e7ba      	b.n	8004c04 <_printf_i+0x150>
 8004c8e:	680b      	ldr	r3, [r1, #0]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	600a      	str	r2, [r1, #0]
 8004c94:	681e      	ldr	r6, [r3, #0]
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7fb faa0 	bl	80001e0 <memchr>
 8004ca0:	b108      	cbz	r0, 8004ca6 <_printf_i+0x1f2>
 8004ca2:	1b80      	subs	r0, r0, r6
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	2300      	movs	r3, #0
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	e7a8      	b.n	8004c04 <_printf_i+0x150>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d0ab      	beq.n	8004c18 <_printf_i+0x164>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	d413      	bmi.n	8004cee <_printf_i+0x23a>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bfb8      	it	lt
 8004cce:	4618      	movlt	r0, r3
 8004cd0:	e7a4      	b.n	8004c1c <_printf_i+0x168>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d09b      	beq.n	8004c18 <_printf_i+0x164>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	9903      	ldr	r1, [sp, #12]
 8004ce6:	1a5b      	subs	r3, r3, r1
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	dcf2      	bgt.n	8004cd2 <_printf_i+0x21e>
 8004cec:	e7eb      	b.n	8004cc6 <_printf_i+0x212>
 8004cee:	2500      	movs	r5, #0
 8004cf0:	f104 0619 	add.w	r6, r4, #25
 8004cf4:	e7f5      	b.n	8004ce2 <_printf_i+0x22e>
 8004cf6:	bf00      	nop
 8004cf8:	08004f05 	.word	0x08004f05
 8004cfc:	08004f16 	.word	0x08004f16

08004d00 <memmove>:
 8004d00:	4288      	cmp	r0, r1
 8004d02:	b510      	push	{r4, lr}
 8004d04:	eb01 0402 	add.w	r4, r1, r2
 8004d08:	d902      	bls.n	8004d10 <memmove+0x10>
 8004d0a:	4284      	cmp	r4, r0
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	d807      	bhi.n	8004d20 <memmove+0x20>
 8004d10:	1e43      	subs	r3, r0, #1
 8004d12:	42a1      	cmp	r1, r4
 8004d14:	d008      	beq.n	8004d28 <memmove+0x28>
 8004d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d1e:	e7f8      	b.n	8004d12 <memmove+0x12>
 8004d20:	4402      	add	r2, r0
 8004d22:	4601      	mov	r1, r0
 8004d24:	428a      	cmp	r2, r1
 8004d26:	d100      	bne.n	8004d2a <memmove+0x2a>
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d32:	e7f7      	b.n	8004d24 <memmove+0x24>

08004d34 <_realloc_r>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	4607      	mov	r7, r0
 8004d38:	4614      	mov	r4, r2
 8004d3a:	460e      	mov	r6, r1
 8004d3c:	b921      	cbnz	r1, 8004d48 <_realloc_r+0x14>
 8004d3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d42:	4611      	mov	r1, r2
 8004d44:	f7ff bb94 	b.w	8004470 <_malloc_r>
 8004d48:	b922      	cbnz	r2, 8004d54 <_realloc_r+0x20>
 8004d4a:	f7ff fc99 	bl	8004680 <_free_r>
 8004d4e:	4625      	mov	r5, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d54:	f000 f814 	bl	8004d80 <_malloc_usable_size_r>
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d20f      	bcs.n	8004d7c <_realloc_r+0x48>
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f7ff fb86 	bl	8004470 <_malloc_r>
 8004d64:	4605      	mov	r5, r0
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d0f2      	beq.n	8004d50 <_realloc_r+0x1c>
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	f7ff fb69 	bl	8004444 <memcpy>
 8004d72:	4631      	mov	r1, r6
 8004d74:	4638      	mov	r0, r7
 8004d76:	f7ff fc83 	bl	8004680 <_free_r>
 8004d7a:	e7e9      	b.n	8004d50 <_realloc_r+0x1c>
 8004d7c:	4635      	mov	r5, r6
 8004d7e:	e7e7      	b.n	8004d50 <_realloc_r+0x1c>

08004d80 <_malloc_usable_size_r>:
 8004d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d84:	1f18      	subs	r0, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfbc      	itt	lt
 8004d8a:	580b      	ldrlt	r3, [r1, r0]
 8004d8c:	18c0      	addlt	r0, r0, r3
 8004d8e:	4770      	bx	lr

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr
