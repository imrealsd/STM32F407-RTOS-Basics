
2.Playing_With_Priorities.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cbc  08003cbc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc4  08003cc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040d4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004148  20004148  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f34  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db5  00000000  00000000  00035fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00038d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f70  00000000  00000000  00039e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a80  00000000  00000000  0003ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129d3  00000000  00000000  0005d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2777  00000000  00000000  000701db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142952  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004724  00000000  00000000  001429a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b54 	.word	0x08003b54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003b54 	.word	0x08003b54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000090 	.word	0x20000090
 8000508:	20000144 	.word	0x20000144

0800050c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_FREERTOS_Init+0x30>)
 8000514:	1d3c      	adds	r4, r7, #4
 8000516:	461d      	mov	r5, r3
 8000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f001 ffc6 	bl	80024ba <osThreadCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <MX_FREERTOS_Init+0x34>)
 8000532:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	08003b78 	.word	0x08003b78
 8000540:	2000409c 	.word	0x2000409c

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f002 f800 	bl	8002552 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_GPIO_Init+0x30>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <MX_GPIO_Init+0x30>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_GPIO_Init+0x30>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0

  HAL_Init();
 800058e:	f000 fa77 	bl	8000a80 <HAL_Init>
  SystemClock_Config();
 8000592:	f000 f89f 	bl	80006d4 <SystemClock_Config>
  MX_GPIO_Init();
 8000596:	f7ff ffdd 	bl	8000554 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f9d5 	bl	8000948 <MX_USART1_UART_Init>
  MX_FREERTOS_Init();
 800059e:	f7ff ffb5 	bl	800050c <MX_FREERTOS_Init>

  osThreadDef(Task1, Task1_init, osPriorityAboveNormal, 0, 128);
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <main+0x98>)
 80005a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 ff7c 	bl	80024ba <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <main+0x9c>)
 80005c6:	6013      	str	r3, [r2, #0]

  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <main+0xa0>)
 80005ca:	f107 0420 	add.w	r4, r7, #32
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 ff69 	bl	80024ba <osThreadCreate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0xa4>)
 80005ec:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, Task3_init, osPriorityBelowNormal, 0, 128);
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0xa8>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f001 ff58 	bl	80024ba <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <main+0xac>)
 800060e:	6013      	str	r3, [r2, #0]


  /* Start scheduler */
  osKernelStart();
 8000610:	f001 ff4c 	bl	80024ac <osKernelStart>
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3758      	adds	r7, #88	; 0x58
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	08003bac 	.word	0x08003bac
 8000624:	200040a0 	.word	0x200040a0
 8000628:	08003bc8 	.word	0x08003bc8
 800062c:	200040a8 	.word	0x200040a8
 8000630:	08003be4 	.word	0x08003be4
 8000634:	200040a4 	.word	0x200040a4

08000638 <Task1_init>:


void Task1_init(void const *arguments)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	for (;;) {
		char *msg = "Hello From Task1\r\n";
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <Task1_init+0x2c>)
 8000642:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8000644:	68f8      	ldr	r0, [r7, #12]
 8000646:	f7ff fdc3 	bl	80001d0 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	68f9      	ldr	r1, [r7, #12]
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <Task1_init+0x30>)
 8000654:	f001 fc49 	bl	8001eea <HAL_UART_Transmit>
		osDelay(500);
 8000658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065c:	f001 ff79 	bl	8002552 <osDelay>
	for (;;) {
 8000660:	e7ee      	b.n	8000640 <Task1_init+0x8>
 8000662:	bf00      	nop
 8000664:	08003c00 	.word	0x08003c00
 8000668:	200040f4 	.word	0x200040f4

0800066c <Task2_init>:
	}
}

void Task2_init(void const *arguments)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	for (;;) {
		char *msg = "Hello From Task2\r\n";
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <Task2_init+0x2c>)
 8000676:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <Task2_init+0x30>)
 8000688:	f001 fc2f 	bl	8001eea <HAL_UART_Transmit>
		osDelay(500);
 800068c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000690:	f001 ff5f 	bl	8002552 <osDelay>
	for (;;) {
 8000694:	e7ee      	b.n	8000674 <Task2_init+0x8>
 8000696:	bf00      	nop
 8000698:	08003c14 	.word	0x08003c14
 800069c:	200040f4 	.word	0x200040f4

080006a0 <Task3_init>:
	}
}

void Task3_init(void const *arguments)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	for (;;) {
		char *msg = "Hello From Task3\r\n\n";
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <Task3_init+0x2c>)
 80006aa:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fd8f 	bl	80001d0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Task3_init+0x30>)
 80006bc:	f001 fc15 	bl	8001eea <HAL_UART_Transmit>
		osDelay(500);
 80006c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c4:	f001 ff45 	bl	8002552 <osDelay>
	for (;;) {
 80006c8:	e7ee      	b.n	80006a8 <Task3_init+0x8>
 80006ca:	bf00      	nop
 80006cc:	08003c28 	.word	0x08003c28
 80006d0:	200040f4 	.word	0x200040f4

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f968 	bl	80039b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000748:	23a8      	movs	r3, #168	; 0xa8
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fc51 	bl	8001000 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
    Error_Handler();
 8000764:	f000 f832 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2105      	movs	r1, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f000 feb2 	bl	80014f0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
    Error_Handler();
 8000792:	f000 f81b 	bl	80007cc <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f983 	bl	8000ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010000 	.word	0x40010000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_MspInit+0x54>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_MspInit+0x54>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 fa29 	bl	8000c74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	2019      	movs	r0, #25
 8000846:	f000 fa15 	bl	8000c74 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800084a:	2019      	movs	r0, #25
 800084c:	f000 fa2e 	bl	8000cac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <HAL_InitTick+0xa4>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <HAL_InitTick+0xa4>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6453      	str	r3, [r2, #68]	; 0x44
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <HAL_InitTick+0xa4>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086c:	f107 0210 	add.w	r2, r7, #16
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f80a 	bl	8001890 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800087c:	f000 fff4 	bl	8001868 <HAL_RCC_GetPCLK2Freq>
 8000880:	4603      	mov	r3, r0
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_InitTick+0xa8>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0c9b      	lsrs	r3, r3, #18
 8000890:	3b01      	subs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_InitTick+0xac>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <HAL_InitTick+0xb0>)
 8000898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_InitTick+0xac>)
 800089c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_InitTick+0xac>)
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_InitTick+0xac>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_InitTick+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_InitTick+0xac>)
 80008b6:	f001 f81d 	bl	80018f4 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_InitTick+0xac>)
 80008c2:	f001 f871 	bl	80019a8 <HAL_TIM_Base_Start_IT>
 80008c6:	4603      	mov	r3, r0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3730      	adds	r7, #48	; 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	431bde83 	.word	0x431bde83
 80008dc:	200040ac 	.word	0x200040ac
 80008e0:	40010000 	.word	0x40010000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000916:	f001 f8b7 	bl	8001a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200040ac 	.word	0x200040ac

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART1_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000980:	f001 fa66 	bl	8001e50 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f7ff ff1f 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200040f4 	.word	0x200040f4
 8000998:	40011000 	.word	0x40011000

0800099c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a14:	f000 f958 	bl	8000cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40011000 	.word	0x40011000
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ff65 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 ff87 	bl	800396c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fd93 	bl	8000588 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a70:	08003ccc 	.word	0x08003ccc
  ldr r2, =_sbss
 8000a74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a78:	20004148 	.word	0x20004148

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f8d8 	bl	8000c5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff febe 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe90 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20004138 	.word	0x20004138

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20004138 	.word	0x20004138

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff4c 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c86:	f7ff ff61 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	6978      	ldr	r0, [r7, #20]
 8000c92:	f7ff ffb1 	bl	8000bf8 <NVIC_EncodePriority>
 8000c96:	4602      	mov	r2, r0
 8000c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff80 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff54 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e16b      	b.n	8000fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 815a 	bne.w	8000fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d017      	beq.n	8000db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80b4 	beq.w	8000fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6a:	4a5b      	ldr	r2, [pc, #364]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d02b      	beq.n	8000eee <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x328>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x32c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x20e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x20a>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e00e      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	e00c      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e00a      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f00:	4935      	ldr	r1, [pc, #212]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f32:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	f67f ae90 	bls.w	8000ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	40021c00 	.word	0x40021c00
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e264      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d075      	beq.n	800110a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800101e:	4ba3      	ldr	r3, [pc, #652]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b04      	cmp	r3, #4
 8001028:	d00c      	beq.n	8001044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102a:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001032:	2b08      	cmp	r3, #8
 8001034:	d112      	bne.n	800105c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001036:	4b9d      	ldr	r3, [pc, #628]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001042:	d10b      	bne.n	800105c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4b99      	ldr	r3, [pc, #612]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d05b      	beq.n	8001108 <HAL_RCC_OscConfig+0x108>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d157      	bne.n	8001108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e23f      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d106      	bne.n	8001074 <HAL_RCC_OscConfig+0x74>
 8001066:	4b91      	ldr	r3, [pc, #580]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a90      	ldr	r2, [pc, #576]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e01d      	b.n	80010b0 <HAL_RCC_OscConfig+0xb0>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0x98>
 800107e:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a8a      	ldr	r2, [pc, #552]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b88      	ldr	r3, [pc, #544]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a87      	ldr	r2, [pc, #540]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e00b      	b.n	80010b0 <HAL_RCC_OscConfig+0xb0>
 8001098:	4b84      	ldr	r3, [pc, #528]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a83      	ldr	r2, [pc, #524]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800109e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b81      	ldr	r3, [pc, #516]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a80      	ldr	r2, [pc, #512]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fd18 	bl	8000aec <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fd14 	bl	8000aec <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	; 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e204      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0xc0>
 80010de:	e014      	b.n	800110a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fd04 	bl	8000aec <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fd00 	bl	8000aec <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e1f0      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0xe8>
 8001106:	e000      	b.n	800110a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d063      	beq.n	80011de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00b      	beq.n	800113a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001122:	4b62      	ldr	r3, [pc, #392]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800112a:	2b08      	cmp	r3, #8
 800112c:	d11c      	bne.n	8001168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d116      	bne.n	8001168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x152>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d001      	beq.n	8001152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e1c4      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001152:	4b56      	ldr	r3, [pc, #344]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4952      	ldr	r1, [pc, #328]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	e03a      	b.n	80011de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d020      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001170:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <HAL_RCC_OscConfig+0x2b0>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001176:	f7ff fcb9 	bl	8000aec <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff fcb5 	bl	8000aec <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e1a5      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119c:	4b43      	ldr	r3, [pc, #268]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4940      	ldr	r1, [pc, #256]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
 80011b0:	e015      	b.n	80011de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <HAL_RCC_OscConfig+0x2b0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc98 	bl	8000aec <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c0:	f7ff fc94 	bl	8000aec <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e184      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d030      	beq.n	800124c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d016      	beq.n	8001220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_RCC_OscConfig+0x2b4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fc78 	bl	8000aec <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fc74 	bl	8000aec <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e164      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x200>
 800121e:	e015      	b.n	800124c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x2b4>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff fc61 	bl	8000aec <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122e:	f7ff fc5d 	bl	8000aec <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e14d      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a0 	beq.w	800139a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10f      	bne.n	800128a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_RCC_OscConfig+0x2ac>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001286:	2301      	movs	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_RCC_OscConfig+0x2b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	2b00      	cmp	r3, #0
 8001294:	d121      	bne.n	80012da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_RCC_OscConfig+0x2b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_RCC_OscConfig+0x2b8>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fc23 	bl	8000aec <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	e011      	b.n	80012ce <HAL_RCC_OscConfig+0x2ce>
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
 80012b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012bc:	f7ff fc16 	bl	8000aec <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e106      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x4e4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d106      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2f0>
 80012e2:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e6:	4a80      	ldr	r2, [pc, #512]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6713      	str	r3, [r2, #112]	; 0x70
 80012ee:	e01c      	b.n	800132a <HAL_RCC_OscConfig+0x32a>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d10c      	bne.n	8001312 <HAL_RCC_OscConfig+0x312>
 80012f8:	4b7b      	ldr	r3, [pc, #492]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	4a7a      	ldr	r2, [pc, #488]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6713      	str	r3, [r2, #112]	; 0x70
 8001304:	4b78      	ldr	r3, [pc, #480]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001308:	4a77      	ldr	r2, [pc, #476]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6713      	str	r3, [r2, #112]	; 0x70
 8001310:	e00b      	b.n	800132a <HAL_RCC_OscConfig+0x32a>
 8001312:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	4a74      	ldr	r2, [pc, #464]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6713      	str	r3, [r2, #112]	; 0x70
 800131e:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	4a71      	ldr	r2, [pc, #452]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d015      	beq.n	800135e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001332:	f7ff fbdb 	bl	8000aec <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fbd7 	bl	8000aec <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e0c5      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001350:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0ee      	beq.n	800133a <HAL_RCC_OscConfig+0x33a>
 800135c:	e014      	b.n	8001388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fbc5 	bl	8000aec <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fbc1 	bl	8000aec <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0af      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137c:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ee      	bne.n	8001366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d105      	bne.n	800139a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 809b 	beq.w	80014da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a4:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d05c      	beq.n	800146a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d141      	bne.n	800143c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b8:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <HAL_RCC_OscConfig+0x4ec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff fb95 	bl	8000aec <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c6:	f7ff fb91 	bl	8000aec <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e081      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d8:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	019b      	lsls	r3, r3, #6
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	3b01      	subs	r3, #1
 80013fe:	041b      	lsls	r3, r3, #16
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	061b      	lsls	r3, r3, #24
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_RCC_OscConfig+0x4ec>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb6a 	bl	8000aec <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fb66 	bl	8000aec <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e056      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x41c>
 800143a:	e04e      	b.n	80014da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_OscConfig+0x4ec>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fb53 	bl	8000aec <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fb4f 	bl	8000aec <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e03f      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x44a>
 8001468:	e037      	b.n	80014da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e032      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_RCC_OscConfig+0x4e8>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d028      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d121      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d11a      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014a6:	4013      	ands	r3, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d111      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	3b01      	subs	r3, #1
 80014c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40007000 	.word	0x40007000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470060 	.word	0x42470060

080014f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0cc      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d90c      	bls.n	800152c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0b8      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800154e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	494d      	ldr	r1, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d044      	beq.n	8001610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d119      	bne.n	80015ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07f      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d003      	beq.n	80015ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06f      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e067      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 0203 	bic.w	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4934      	ldr	r1, [pc, #208]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e0:	f7ff fa84 	bl	8000aec <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff fa80 	bl	8000aec <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e04f      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 020c 	and.w	r2, r3, #12
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d1eb      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d20c      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4916      	ldr	r1, [pc, #88]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001676:	f000 f821 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167a:	4602      	mov	r2, r0
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	490a      	ldr	r1, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	5ccb      	ldrb	r3, [r1, r3]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f8ca 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00
 80016ac:	40023800 	.word	0x40023800
 80016b0:	08003c44 	.word	0x08003c44
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016c2:	2100      	movs	r1, #0
 80016c4:	6079      	str	r1, [r7, #4]
 80016c6:	2100      	movs	r1, #0
 80016c8:	60f9      	str	r1, [r7, #12]
 80016ca:	2100      	movs	r1, #0
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016ce:	2100      	movs	r1, #0
 80016d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d2:	4952      	ldr	r1, [pc, #328]	; (800181c <HAL_RCC_GetSysClockFreq+0x160>)
 80016d4:	6889      	ldr	r1, [r1, #8]
 80016d6:	f001 010c 	and.w	r1, r1, #12
 80016da:	2908      	cmp	r1, #8
 80016dc:	d00d      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x3e>
 80016de:	2908      	cmp	r1, #8
 80016e0:	f200 8094 	bhi.w	800180c <HAL_RCC_GetSysClockFreq+0x150>
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d002      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0x32>
 80016e8:	2904      	cmp	r1, #4
 80016ea:	d003      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x38>
 80016ec:	e08e      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_RCC_GetSysClockFreq+0x164>)
 80016f0:	60bb      	str	r3, [r7, #8]
       break;
 80016f2:	e08e      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_RCC_GetSysClockFreq+0x168>)
 80016f6:	60bb      	str	r3, [r7, #8]
      break;
 80016f8:	e08b      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016fa:	4948      	ldr	r1, [pc, #288]	; (800181c <HAL_RCC_GetSysClockFreq+0x160>)
 80016fc:	6849      	ldr	r1, [r1, #4]
 80016fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001702:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001704:	4945      	ldr	r1, [pc, #276]	; (800181c <HAL_RCC_GetSysClockFreq+0x160>)
 8001706:	6849      	ldr	r1, [r1, #4]
 8001708:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800170c:	2900      	cmp	r1, #0
 800170e:	d024      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4942      	ldr	r1, [pc, #264]	; (800181c <HAL_RCC_GetSysClockFreq+0x160>)
 8001712:	6849      	ldr	r1, [r1, #4]
 8001714:	0989      	lsrs	r1, r1, #6
 8001716:	4608      	mov	r0, r1
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001720:	f04f 0500 	mov.w	r5, #0
 8001724:	ea00 0204 	and.w	r2, r0, r4
 8001728:	ea01 0305 	and.w	r3, r1, r5
 800172c:	493d      	ldr	r1, [pc, #244]	; (8001824 <HAL_RCC_GetSysClockFreq+0x168>)
 800172e:	fb01 f003 	mul.w	r0, r1, r3
 8001732:	2100      	movs	r1, #0
 8001734:	fb01 f102 	mul.w	r1, r1, r2
 8001738:	1844      	adds	r4, r0, r1
 800173a:	493a      	ldr	r1, [pc, #232]	; (8001824 <HAL_RCC_GetSysClockFreq+0x168>)
 800173c:	fba2 0101 	umull	r0, r1, r2, r1
 8001740:	1863      	adds	r3, r4, r1
 8001742:	4619      	mov	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	f7fe fd48 	bl	80001e0 <__aeabi_uldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4613      	mov	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e04a      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_GetSysClockFreq+0x160>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	461a      	mov	r2, r3
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	ea02 0400 	and.w	r4, r2, r0
 8001772:	ea03 0501 	and.w	r5, r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	014b      	lsls	r3, r1, #5
 8001784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001788:	0142      	lsls	r2, r0, #5
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	1b00      	subs	r0, r0, r4
 8001790:	eb61 0105 	sbc.w	r1, r1, r5
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	018b      	lsls	r3, r1, #6
 800179e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017a2:	0182      	lsls	r2, r0, #6
 80017a4:	1a12      	subs	r2, r2, r0
 80017a6:	eb63 0301 	sbc.w	r3, r3, r1
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	00d9      	lsls	r1, r3, #3
 80017b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b8:	00d0      	lsls	r0, r2, #3
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	1912      	adds	r2, r2, r4
 80017c0:	eb45 0303 	adc.w	r3, r5, r3
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	0299      	lsls	r1, r3, #10
 80017ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017d2:	0290      	lsls	r0, r2, #10
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	461a      	mov	r2, r3
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f7fe fcfc 	bl	80001e0 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_GetSysClockFreq+0x160>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	60bb      	str	r3, [r7, #8]
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_RCC_GetSysClockFreq+0x164>)
 800180e:	60bb      	str	r3, [r7, #8]
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	68bb      	ldr	r3, [r7, #8]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	00f42400 	.word	0x00f42400
 8001824:	017d7840 	.word	0x017d7840

08001828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_RCC_GetHCLKFreq+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001844:	f7ff fff0 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001848:	4602      	mov	r2, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	0a9b      	lsrs	r3, r3, #10
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4903      	ldr	r1, [pc, #12]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001856:	5ccb      	ldrb	r3, [r1, r3]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	08003c54 	.word	0x08003c54

08001868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800186c:	f7ff ffdc 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	0b5b      	lsrs	r3, r3, #13
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <HAL_RCC_GetPCLK2Freq+0x24>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	08003c54 	.word	0x08003c54

08001890 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	220f      	movs	r2, #15
 800189e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_RCC_GetClockConfig+0x60>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0207 	and.w	r2, r3, #7
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e041      	b.n	800198a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f839 	bl	8001992 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f000 f9d8 	bl	8001ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d001      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04e      	b.n	8001a5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_TIM_Base_Start_IT+0xc4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d022      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d01d      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_TIM_Base_Start_IT+0xc8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d018      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_TIM_Base_Start_IT+0xcc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00e      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d009      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x80>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d010      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a4a:	e007      	b.n	8001a5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40000800 	.word	0x40000800
 8001a78:	40000c00 	.word	0x40000c00
 8001a7c:	40010400 	.word	0x40010400
 8001a80:	40014000 	.word	0x40014000
 8001a84:	40001800 	.word	0x40001800

08001a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d122      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0202 	mvn.w	r2, #2
 8001ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8ee 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e005      	b.n	8001ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8e0 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8f1 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d122      	bne.n	8001b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d11b      	bne.n	8001b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0204 	mvn.w	r2, #4
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8c4 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8b6 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f8c7 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0208 	mvn.w	r2, #8
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f89a 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f88c 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f89d 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0210 	mvn.w	r2, #16
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f870 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f862 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f873 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0201 	mvn.w	r2, #1
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fdce 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b80      	cmp	r3, #128	; 0x80
 8001c18:	d10e      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	2b80      	cmp	r3, #128	; 0x80
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f902 	bl	8001e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	2b40      	cmp	r3, #64	; 0x40
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d107      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f838 	bl	8001cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d107      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0220 	mvn.w	r2, #32
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8cc 	bl	8001e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a40      	ldr	r2, [pc, #256]	; (8001dfc <TIM_Base_SetConfig+0x114>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d00f      	beq.n	8001d28 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3d      	ldr	r2, [pc, #244]	; (8001e00 <TIM_Base_SetConfig+0x118>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00b      	beq.n	8001d28 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3c      	ldr	r2, [pc, #240]	; (8001e04 <TIM_Base_SetConfig+0x11c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <TIM_Base_SetConfig+0x120>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <TIM_Base_SetConfig+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <TIM_Base_SetConfig+0x124>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d108      	bne.n	8001d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <TIM_Base_SetConfig+0x114>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02b      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d48:	d027      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <TIM_Base_SetConfig+0x118>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d023      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <TIM_Base_SetConfig+0x11c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <TIM_Base_SetConfig+0x120>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01b      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <TIM_Base_SetConfig+0x124>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d017      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <TIM_Base_SetConfig+0x128>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <TIM_Base_SetConfig+0x12c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00f      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <TIM_Base_SetConfig+0x130>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00b      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <TIM_Base_SetConfig+0x134>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <TIM_Base_SetConfig+0x138>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d003      	beq.n	8001d9a <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <TIM_Base_SetConfig+0x13c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d108      	bne.n	8001dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <TIM_Base_SetConfig+0x114>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <TIM_Base_SetConfig+0xf8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <TIM_Base_SetConfig+0x124>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d103      	bne.n	8001de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	615a      	str	r2, [r3, #20]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40000c00 	.word	0x40000c00
 8001e0c:	40010400 	.word	0x40010400
 8001e10:	40014000 	.word	0x40014000
 8001e14:	40014400 	.word	0x40014400
 8001e18:	40014800 	.word	0x40014800
 8001e1c:	40001800 	.word	0x40001800
 8001e20:	40001c00 	.word	0x40001c00
 8001e24:	40002000 	.word	0x40002000

08001e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e03f      	b.n	8001ee2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fd90 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f929 	bl	80020ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	; 0x28
 8001eee:	af02      	add	r7, sp, #8
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d17c      	bne.n	8002004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_UART_Transmit+0x2c>
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e075      	b.n	8002006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_UART_Transmit+0x3e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e06e      	b.n	8002006 <HAL_UART_Transmit+0x11c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fdd5 	bl	8000aec <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f58:	d108      	bne.n	8001f6c <HAL_UART_Transmit+0x82>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e003      	b.n	8001f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f7c:	e02a      	b.n	8001fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f840 	bl	800200e <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e036      	b.n	8002006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	e007      	b.n	8001fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1cf      	bne.n	8001f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f810 	bl	800200e <UART_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002004:	2302      	movs	r3, #2
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b090      	sub	sp, #64	; 0x40
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800201e:	e050      	b.n	80020c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002026:	d04c      	beq.n	80020c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <UART_WaitOnFlagUntilTimeout+0x30>
 800202e:	f7fe fd5d 	bl	8000aec <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800203a:	429a      	cmp	r2, r3
 800203c:	d241      	bcs.n	80020c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	330c      	adds	r3, #12
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	e853 3f00 	ldrex	r3, [r3]
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	330c      	adds	r3, #12
 800205c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800205e:	637a      	str	r2, [r7, #52]	; 0x34
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e5      	bne.n	800203e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3314      	adds	r3, #20
 8002078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	613b      	str	r3, [r7, #16]
   return(result);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3314      	adds	r3, #20
 8002090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002092:	623a      	str	r2, [r7, #32]
 8002094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	69f9      	ldr	r1, [r7, #28]
 8002098:	6a3a      	ldr	r2, [r7, #32]
 800209a:	e841 2300 	strex	r3, r2, [r1]
 800209e:	61bb      	str	r3, [r7, #24]
   return(result);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e5      	bne.n	8002072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e00f      	b.n	80020e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d09f      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3740      	adds	r7, #64	; 0x40
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f0:	b09f      	sub	sp, #124	; 0x7c
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	ea40 0301 	orr.w	r3, r0, r1
 800210c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800210e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	431a      	orrs	r2, r3
 8002118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	431a      	orrs	r2, r3
 800211e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4313      	orrs	r3, r2
 8002124:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002130:	f021 010c 	bic.w	r1, r1, #12
 8002134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213a:	430b      	orrs	r3, r1
 800213c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800213e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	6999      	ldr	r1, [r3, #24]
 800214c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	ea40 0301 	orr.w	r3, r0, r1
 8002154:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4bc5      	ldr	r3, [pc, #788]	; (8002470 <UART_SetConfig+0x384>)
 800215c:	429a      	cmp	r2, r3
 800215e:	d004      	beq.n	800216a <UART_SetConfig+0x7e>
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4bc3      	ldr	r3, [pc, #780]	; (8002474 <UART_SetConfig+0x388>)
 8002166:	429a      	cmp	r2, r3
 8002168:	d103      	bne.n	8002172 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800216a:	f7ff fb7d 	bl	8001868 <HAL_RCC_GetPCLK2Freq>
 800216e:	6778      	str	r0, [r7, #116]	; 0x74
 8002170:	e002      	b.n	8002178 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002172:	f7ff fb65 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 8002176:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002180:	f040 80b6 	bne.w	80022f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002186:	461c      	mov	r4, r3
 8002188:	f04f 0500 	mov.w	r5, #0
 800218c:	4622      	mov	r2, r4
 800218e:	462b      	mov	r3, r5
 8002190:	1891      	adds	r1, r2, r2
 8002192:	6439      	str	r1, [r7, #64]	; 0x40
 8002194:	415b      	adcs	r3, r3
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
 8002198:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800219c:	1912      	adds	r2, r2, r4
 800219e:	eb45 0303 	adc.w	r3, r5, r3
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	00d9      	lsls	r1, r3, #3
 80021ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021b0:	00d0      	lsls	r0, r2, #3
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	1911      	adds	r1, r2, r4
 80021b8:	6639      	str	r1, [r7, #96]	; 0x60
 80021ba:	416b      	adcs	r3, r5
 80021bc:	667b      	str	r3, [r7, #100]	; 0x64
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	1891      	adds	r1, r2, r2
 80021ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80021cc:	415b      	adcs	r3, r3
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80021d8:	f7fe f802 	bl	80001e0 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4ba5      	ldr	r3, [pc, #660]	; (8002478 <UART_SetConfig+0x38c>)
 80021e2:	fba3 2302 	umull	r2, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	011e      	lsls	r6, r3, #4
 80021ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ec:	461c      	mov	r4, r3
 80021ee:	f04f 0500 	mov.w	r5, #0
 80021f2:	4622      	mov	r2, r4
 80021f4:	462b      	mov	r3, r5
 80021f6:	1891      	adds	r1, r2, r2
 80021f8:	6339      	str	r1, [r7, #48]	; 0x30
 80021fa:	415b      	adcs	r3, r3
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
 80021fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002202:	1912      	adds	r2, r2, r4
 8002204:	eb45 0303 	adc.w	r3, r5, r3
 8002208:	f04f 0000 	mov.w	r0, #0
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	00d9      	lsls	r1, r3, #3
 8002212:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002216:	00d0      	lsls	r0, r2, #3
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	1911      	adds	r1, r2, r4
 800221e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002220:	416b      	adcs	r3, r5
 8002222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	461a      	mov	r2, r3
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	1891      	adds	r1, r2, r2
 8002230:	62b9      	str	r1, [r7, #40]	; 0x28
 8002232:	415b      	adcs	r3, r3
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800223a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800223e:	f7fd ffcf 	bl	80001e0 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <UART_SetConfig+0x38c>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	2164      	movs	r1, #100	; 0x64
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3332      	adds	r3, #50	; 0x32
 800225a:	4a87      	ldr	r2, [pc, #540]	; (8002478 <UART_SetConfig+0x38c>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002268:	441e      	add	r6, r3
 800226a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226c:	4618      	mov	r0, r3
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	1894      	adds	r4, r2, r2
 8002278:	623c      	str	r4, [r7, #32]
 800227a:	415b      	adcs	r3, r3
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002282:	1812      	adds	r2, r2, r0
 8002284:	eb41 0303 	adc.w	r3, r1, r3
 8002288:	f04f 0400 	mov.w	r4, #0
 800228c:	f04f 0500 	mov.w	r5, #0
 8002290:	00dd      	lsls	r5, r3, #3
 8002292:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002296:	00d4      	lsls	r4, r2, #3
 8002298:	4622      	mov	r2, r4
 800229a:	462b      	mov	r3, r5
 800229c:	1814      	adds	r4, r2, r0
 800229e:	653c      	str	r4, [r7, #80]	; 0x50
 80022a0:	414b      	adcs	r3, r1
 80022a2:	657b      	str	r3, [r7, #84]	; 0x54
 80022a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	1891      	adds	r1, r2, r2
 80022b0:	61b9      	str	r1, [r7, #24]
 80022b2:	415b      	adcs	r3, r3
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022be:	f7fd ff8f 	bl	80001e0 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4b6c      	ldr	r3, [pc, #432]	; (8002478 <UART_SetConfig+0x38c>)
 80022c8:	fba3 1302 	umull	r1, r3, r3, r2
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	2164      	movs	r1, #100	; 0x64
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	3332      	adds	r3, #50	; 0x32
 80022da:	4a67      	ldr	r2, [pc, #412]	; (8002478 <UART_SetConfig+0x38c>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4432      	add	r2, r6
 80022ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022ee:	e0b9      	b.n	8002464 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f2:	461c      	mov	r4, r3
 80022f4:	f04f 0500 	mov.w	r5, #0
 80022f8:	4622      	mov	r2, r4
 80022fa:	462b      	mov	r3, r5
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	6139      	str	r1, [r7, #16]
 8002300:	415b      	adcs	r3, r3
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002308:	1912      	adds	r2, r2, r4
 800230a:	eb45 0303 	adc.w	r3, r5, r3
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	00d9      	lsls	r1, r3, #3
 8002318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800231c:	00d0      	lsls	r0, r2, #3
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	eb12 0804 	adds.w	r8, r2, r4
 8002326:	eb43 0905 	adc.w	r9, r3, r5
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	008b      	lsls	r3, r1, #2
 800233e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002342:	0082      	lsls	r2, r0, #2
 8002344:	4640      	mov	r0, r8
 8002346:	4649      	mov	r1, r9
 8002348:	f7fd ff4a 	bl	80001e0 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4b49      	ldr	r3, [pc, #292]	; (8002478 <UART_SetConfig+0x38c>)
 8002352:	fba3 2302 	umull	r2, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	011e      	lsls	r6, r3, #4
 800235a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235c:	4618      	mov	r0, r3
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	1894      	adds	r4, r2, r2
 8002368:	60bc      	str	r4, [r7, #8]
 800236a:	415b      	adcs	r3, r3
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002372:	1812      	adds	r2, r2, r0
 8002374:	eb41 0303 	adc.w	r3, r1, r3
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	f04f 0500 	mov.w	r5, #0
 8002380:	00dd      	lsls	r5, r3, #3
 8002382:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002386:	00d4      	lsls	r4, r2, #3
 8002388:	4622      	mov	r2, r4
 800238a:	462b      	mov	r3, r5
 800238c:	1814      	adds	r4, r2, r0
 800238e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002390:	414b      	adcs	r3, r1
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	008b      	lsls	r3, r1, #2
 80023a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023ac:	0082      	lsls	r2, r0, #2
 80023ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023b2:	f7fd ff15 	bl	80001e0 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <UART_SetConfig+0x38c>)
 80023bc:	fba3 1302 	umull	r1, r3, r3, r2
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2164      	movs	r1, #100	; 0x64
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <UART_SetConfig+0x38c>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023da:	441e      	add	r6, r3
 80023dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023de:	4618      	mov	r0, r3
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	1894      	adds	r4, r2, r2
 80023ea:	603c      	str	r4, [r7, #0]
 80023ec:	415b      	adcs	r3, r3
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f4:	1812      	adds	r2, r2, r0
 80023f6:	eb41 0303 	adc.w	r3, r1, r3
 80023fa:	f04f 0400 	mov.w	r4, #0
 80023fe:	f04f 0500 	mov.w	r5, #0
 8002402:	00dd      	lsls	r5, r3, #3
 8002404:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002408:	00d4      	lsls	r4, r2, #3
 800240a:	4622      	mov	r2, r4
 800240c:	462b      	mov	r3, r5
 800240e:	eb12 0a00 	adds.w	sl, r2, r0
 8002412:	eb43 0b01 	adc.w	fp, r3, r1
 8002416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	008b      	lsls	r3, r1, #2
 800242a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800242e:	0082      	lsls	r2, r0, #2
 8002430:	4650      	mov	r0, sl
 8002432:	4659      	mov	r1, fp
 8002434:	f7fd fed4 	bl	80001e0 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <UART_SetConfig+0x38c>)
 800243e:	fba3 1302 	umull	r1, r3, r3, r2
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2164      	movs	r1, #100	; 0x64
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	3332      	adds	r3, #50	; 0x32
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <UART_SetConfig+0x38c>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4432      	add	r2, r6
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	377c      	adds	r7, #124	; 0x7c
 8002468:	46bd      	mov	sp, r7
 800246a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800246e:	bf00      	nop
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400
 8002478:	51eb851f 	.word	0x51eb851f

0800247c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800248a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800248e:	2b84      	cmp	r3, #132	; 0x84
 8002490:	d005      	beq.n	800249e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	3303      	adds	r3, #3
 800249c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024b0:	f000 faf6 	bl	8002aa0 <vTaskStartScheduler>
  
  return osOK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}

080024ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024bc:	b089      	sub	sp, #36	; 0x24
 80024be:	af04      	add	r7, sp, #16
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <osThreadCreate+0x54>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685c      	ldr	r4, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681d      	ldr	r5, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691e      	ldr	r6, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ffc8 	bl	800247c <makeFreeRtosPriority>
 80024ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024f6:	9202      	str	r2, [sp, #8]
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	9100      	str	r1, [sp, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4632      	mov	r2, r6
 8002500:	4629      	mov	r1, r5
 8002502:	4620      	mov	r0, r4
 8002504:	f000 f8ed 	bl	80026e2 <xTaskCreateStatic>
 8002508:	4603      	mov	r3, r0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e01c      	b.n	8002548 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685c      	ldr	r4, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800251a:	b29e      	uxth	r6, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ffaa 	bl	800247c <makeFreeRtosPriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	4632      	mov	r2, r6
 8002536:	4629      	mov	r1, r5
 8002538:	4620      	mov	r0, r4
 800253a:	f000 f92f 	bl	800279c <xTaskCreate>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002548:	68fb      	ldr	r3, [r7, #12]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002552 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <osDelay+0x16>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	e000      	b.n	800256a <osDelay+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa64 	bl	8002a38 <vTaskDelay>
  
  return osOK;
 8002570:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0208 	add.w	r2, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002592:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f103 0208 	add.w	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0208 	add.w	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002632:	d103      	bne.n	800263c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e00c      	b.n	8002656 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3308      	adds	r3, #8
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e002      	b.n	800264a <vListInsert+0x2e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d2f6      	bcs.n	8002644 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6852      	ldr	r2, [r2, #4]
 80026ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d103      	bne.n	80026c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b08e      	sub	sp, #56	; 0x38
 80026e6:	af04      	add	r7, sp, #16
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10a      	bne.n	800270c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002708:	bf00      	nop
 800270a:	e7fe      	b.n	800270a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <xTaskCreateStatic+0x46>
	__asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	61fb      	str	r3, [r7, #28]
}
 8002724:	bf00      	nop
 8002726:	e7fe      	b.n	8002726 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002728:	23b4      	movs	r3, #180	; 0xb4
 800272a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2bb4      	cmp	r3, #180	; 0xb4
 8002730:	d00a      	beq.n	8002748 <xTaskCreateStatic+0x66>
	__asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	61bb      	str	r3, [r7, #24]
}
 8002744:	bf00      	nop
 8002746:	e7fe      	b.n	8002746 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002748:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01e      	beq.n	800278e <xTaskCreateStatic+0xac>
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01b      	beq.n	800278e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800275e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	2202      	movs	r2, #2
 8002764:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002768:	2300      	movs	r3, #0
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f851 	bl	8002828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002788:	f000 f8ec 	bl	8002964 <prvAddNewTaskToReadyList>
 800278c:	e001      	b.n	8002792 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002792:	697b      	ldr	r3, [r7, #20]
	}
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af04      	add	r7, sp, #16
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fef1 	bl	8003598 <pvPortMalloc>
 80027b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00e      	beq.n	80027dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027be:	20b4      	movs	r0, #180	; 0xb4
 80027c0:	f000 feea 	bl	8003598 <pvPortMalloc>
 80027c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
 80027d2:	e005      	b.n	80027e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f000 ffab 	bl	8003730 <vPortFree>
 80027da:	e001      	b.n	80027e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d017      	beq.n	8002816 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	2300      	movs	r3, #0
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f80f 	bl	8002828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800280a:	69f8      	ldr	r0, [r7, #28]
 800280c:	f000 f8aa 	bl	8002964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002810:	2301      	movs	r3, #1
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e002      	b.n	800281c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800281c:	69bb      	ldr	r3, [r7, #24]
	}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002840:	3b01      	subs	r3, #1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f023 0307 	bic.w	r3, r3, #7
 800284e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <prvInitialiseNewTask+0x48>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	617b      	str	r3, [r7, #20]
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01f      	beq.n	80028b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e012      	b.n	80028a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	7819      	ldrb	r1, [r3, #0]
 8002884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	3334      	adds	r3, #52	; 0x34
 800288c:	460a      	mov	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d9e9      	bls.n	800287c <prvInitialiseNewTask+0x54>
 80028a8:	e000      	b.n	80028ac <prvInitialiseNewTask+0x84>
			{
				break;
 80028aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b4:	e003      	b.n	80028be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d901      	bls.n	80028c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028c4:	2306      	movs	r3, #6
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	2200      	movs	r2, #0
 80028d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	3304      	adds	r3, #4
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fe6b 	bl	80025ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	3318      	adds	r3, #24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fe66 	bl	80025ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	f1c3 0207 	rsb	r2, r3, #7
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	2200      	movs	r2, #0
 8002908:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	334c      	adds	r3, #76	; 0x4c
 8002918:	2260      	movs	r2, #96	; 0x60
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f84b 	bl	80039b8 <memset>
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <prvInitialiseNewTask+0x130>)
 8002926:	651a      	str	r2, [r3, #80]	; 0x50
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	4a0c      	ldr	r2, [pc, #48]	; (800295c <prvInitialiseNewTask+0x134>)
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <prvInitialiseNewTask+0x138>)
 8002932:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	69b8      	ldr	r0, [r7, #24]
 800293a:	f000 fc1f 	bl	800317c <pxPortInitialiseStack>
 800293e:	4602      	mov	r2, r0
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08003c7c 	.word	0x08003c7c
 800295c:	08003c9c 	.word	0x08003c9c
 8002960:	08003c5c 	.word	0x08003c5c

08002964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800296c:	f000 fd32 	bl	80033d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <prvAddNewTaskToReadyList+0xb8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <prvAddNewTaskToReadyList+0xb8>)
 8002978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <prvAddNewTaskToReadyList+0xbc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002982:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <prvAddNewTaskToReadyList+0xbc>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002988:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <prvAddNewTaskToReadyList+0xb8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d110      	bne.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002990:	f000 facc 	bl	8002f2c <prvInitialiseTaskLists>
 8002994:	e00d      	b.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <prvAddNewTaskToReadyList+0xc0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <prvAddNewTaskToReadyList+0xbc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d802      	bhi.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <prvAddNewTaskToReadyList+0xbc>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <prvAddNewTaskToReadyList+0xc4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <prvAddNewTaskToReadyList+0xc4>)
 80029ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <prvAddNewTaskToReadyList+0xcc>)
 80029dc:	441a      	add	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7ff fdf5 	bl	80025d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029ea:	f000 fd23 	bl	8003434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <prvAddNewTaskToReadyList+0xc0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00e      	beq.n	8002a14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <prvAddNewTaskToReadyList+0xbc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d207      	bcs.n	8002a14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <prvAddNewTaskToReadyList+0xd0>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000444 	.word	0x20000444
 8002a20:	20000344 	.word	0x20000344
 8002a24:	20000450 	.word	0x20000450
 8002a28:	20000460 	.word	0x20000460
 8002a2c:	2000044c 	.word	0x2000044c
 8002a30:	20000348 	.word	0x20000348
 8002a34:	e000ed04 	.word	0xe000ed04

08002a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d017      	beq.n	8002a7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <vTaskDelay+0x60>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <vTaskDelay+0x30>
	__asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	60bb      	str	r3, [r7, #8]
}
 8002a64:	bf00      	nop
 8002a66:	e7fe      	b.n	8002a66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a68:	f000 f884 	bl	8002b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fb1e 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a74:	f000 f88c 	bl	8002b90 <xTaskResumeAll>
 8002a78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <vTaskDelay+0x64>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000046c 	.word	0x2000046c
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aae:	463a      	mov	r2, r7
 8002ab0:	1d39      	adds	r1, r7, #4
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd0e 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	9202      	str	r2, [sp, #8]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2300      	movs	r3, #0
 8002acc:	460a      	mov	r2, r1
 8002ace:	4921      	ldr	r1, [pc, #132]	; (8002b54 <vTaskStartScheduler+0xb4>)
 8002ad0:	4821      	ldr	r0, [pc, #132]	; (8002b58 <vTaskStartScheduler+0xb8>)
 8002ad2:	f7ff fe06 	bl	80026e2 <xTaskCreateStatic>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <vTaskStartScheduler+0xbc>)
 8002ada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <vTaskStartScheduler+0xbc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e001      	b.n	8002aee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d11b      	bne.n	8002b2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
}
 8002b06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <vTaskStartScheduler+0xc0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	334c      	adds	r3, #76	; 0x4c
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <vTaskStartScheduler+0xc4>)
 8002b10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <vTaskStartScheduler+0xc8>)
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <vTaskStartScheduler+0xcc>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <vTaskStartScheduler+0xd0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b26:	f000 fbb3 	bl	8003290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b2a:	e00e      	b.n	8002b4a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b32:	d10a      	bne.n	8002b4a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	60fb      	str	r3, [r7, #12]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <vTaskStartScheduler+0xa8>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08003c3c 	.word	0x08003c3c
 8002b58:	08002efd 	.word	0x08002efd
 8002b5c:	20000468 	.word	0x20000468
 8002b60:	20000344 	.word	0x20000344
 8002b64:	20000010 	.word	0x20000010
 8002b68:	20000464 	.word	0x20000464
 8002b6c:	20000450 	.word	0x20000450
 8002b70:	20000448 	.word	0x20000448

08002b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <vTaskSuspendAll+0x18>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <vTaskSuspendAll+0x18>)
 8002b80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	2000046c 	.word	0x2000046c

08002b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <xTaskResumeAll+0x114>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <xTaskResumeAll+0x2c>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	603b      	str	r3, [r7, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bbc:	f000 fc0a 	bl	80033d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bc0:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <xTaskResumeAll+0x114>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <xTaskResumeAll+0x114>)
 8002bc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <xTaskResumeAll+0x114>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d161      	bne.n	8002c96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bd2:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <xTaskResumeAll+0x118>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d05d      	beq.n	8002c96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bda:	e02e      	b.n	8002c3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bdc:	4b33      	ldr	r3, [pc, #204]	; (8002cac <xTaskResumeAll+0x11c>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3318      	adds	r3, #24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fd50 	bl	800268e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fd4b 	bl	800268e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <xTaskResumeAll+0x120>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <xTaskResumeAll+0x120>)
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <xTaskResumeAll+0x124>)
 8002c18:	441a      	add	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f7ff fcd7 	bl	80025d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <xTaskResumeAll+0x128>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <xTaskResumeAll+0x12c>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <xTaskResumeAll+0x11c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1cc      	bne.n	8002bdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c48:	f000 fa12 	bl	8003070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <xTaskResumeAll+0x130>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c58:	f000 f836 	bl	8002cc8 <xTaskIncrementTick>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <xTaskResumeAll+0x12c>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f1      	bne.n	8002c58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <xTaskResumeAll+0x130>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <xTaskResumeAll+0x12c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <xTaskResumeAll+0x134>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c96:	f000 fbcd 	bl	8003434 <vPortExitCritical>

	return xAlreadyYielded;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000046c 	.word	0x2000046c
 8002ca8:	20000444 	.word	0x20000444
 8002cac:	20000404 	.word	0x20000404
 8002cb0:	2000044c 	.word	0x2000044c
 8002cb4:	20000348 	.word	0x20000348
 8002cb8:	20000344 	.word	0x20000344
 8002cbc:	20000458 	.word	0x20000458
 8002cc0:	20000454 	.word	0x20000454
 8002cc4:	e000ed04 	.word	0xe000ed04

08002cc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <xTaskIncrementTick+0x144>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 808e 	bne.w	8002df8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <xTaskIncrementTick+0x148>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ce4:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <xTaskIncrementTick+0x148>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d120      	bne.n	8002d32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cf0:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <xTaskIncrementTick+0x14c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <xTaskIncrementTick+0x48>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	603b      	str	r3, [r7, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xTaskIncrementTick+0x46>
 8002d10:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <xTaskIncrementTick+0x14c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <xTaskIncrementTick+0x150>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <xTaskIncrementTick+0x14c>)
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4a3e      	ldr	r2, [pc, #248]	; (8002e18 <xTaskIncrementTick+0x150>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <xTaskIncrementTick+0x154>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4a3c      	ldr	r2, [pc, #240]	; (8002e1c <xTaskIncrementTick+0x154>)
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	f000 f99f 	bl	8003070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <xTaskIncrementTick+0x158>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d348      	bcc.n	8002dce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d3c:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <xTaskIncrementTick+0x14c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <xTaskIncrementTick+0x158>)
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d4c:	601a      	str	r2, [r3, #0]
					break;
 8002d4e:	e03e      	b.n	8002dce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <xTaskIncrementTick+0x14c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d203      	bcs.n	8002d70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d68:	4a2d      	ldr	r2, [pc, #180]	; (8002e20 <xTaskIncrementTick+0x158>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d6e:	e02e      	b.n	8002dce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fc8a 	bl	800268e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3318      	adds	r3, #24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fc81 	bl	800268e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	2201      	movs	r2, #1
 8002d92:	409a      	lsls	r2, r3
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <xTaskIncrementTick+0x15c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <xTaskIncrementTick+0x15c>)
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <xTaskIncrementTick+0x160>)
 8002dac:	441a      	add	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7ff fc0d 	bl	80025d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <xTaskIncrementTick+0x164>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3b9      	bcc.n	8002d3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dcc:	e7b6      	b.n	8002d3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <xTaskIncrementTick+0x164>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4914      	ldr	r1, [pc, #80]	; (8002e28 <xTaskIncrementTick+0x160>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d901      	bls.n	8002dea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <xTaskIncrementTick+0x168>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e004      	b.n	8002e02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <xTaskIncrementTick+0x16c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <xTaskIncrementTick+0x16c>)
 8002e00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e02:	697b      	ldr	r3, [r7, #20]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000046c 	.word	0x2000046c
 8002e10:	20000448 	.word	0x20000448
 8002e14:	200003fc 	.word	0x200003fc
 8002e18:	20000400 	.word	0x20000400
 8002e1c:	2000045c 	.word	0x2000045c
 8002e20:	20000464 	.word	0x20000464
 8002e24:	2000044c 	.word	0x2000044c
 8002e28:	20000348 	.word	0x20000348
 8002e2c:	20000344 	.word	0x20000344
 8002e30:	20000458 	.word	0x20000458
 8002e34:	20000454 	.word	0x20000454

08002e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <vTaskSwitchContext+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e46:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <vTaskSwitchContext+0xb0>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e4c:	e044      	b.n	8002ed8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <vTaskSwitchContext+0xb0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <vTaskSwitchContext+0xb4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f1c3 031f 	rsb	r3, r3, #31
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	4921      	ldr	r1, [pc, #132]	; (8002ef0 <vTaskSwitchContext+0xb8>)
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <vTaskSwitchContext+0x5a>
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <vTaskSwitchContext+0xb8>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d104      	bne.n	8002ec4 <vTaskSwitchContext+0x8c>
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <vTaskSwitchContext+0xbc>)
 8002ecc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <vTaskSwitchContext+0xbc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	334c      	adds	r3, #76	; 0x4c
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <vTaskSwitchContext+0xc0>)
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	2000046c 	.word	0x2000046c
 8002ee8:	20000458 	.word	0x20000458
 8002eec:	2000044c 	.word	0x2000044c
 8002ef0:	20000348 	.word	0x20000348
 8002ef4:	20000344 	.word	0x20000344
 8002ef8:	20000010 	.word	0x20000010

08002efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f04:	f000 f852 	bl	8002fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <prvIdleTask+0x28>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d9f9      	bls.n	8002f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <prvIdleTask+0x2c>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f20:	e7f0      	b.n	8002f04 <prvIdleTask+0x8>
 8002f22:	bf00      	nop
 8002f24:	20000348 	.word	0x20000348
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	e00c      	b.n	8002f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <prvInitialiseTaskLists+0x60>)
 8002f44:	4413      	add	r3, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fb17 	bl	800257a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d9ef      	bls.n	8002f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <prvInitialiseTaskLists+0x64>)
 8002f5a:	f7ff fb0e 	bl	800257a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f5e:	480d      	ldr	r0, [pc, #52]	; (8002f94 <prvInitialiseTaskLists+0x68>)
 8002f60:	f7ff fb0b 	bl	800257a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f64:	480c      	ldr	r0, [pc, #48]	; (8002f98 <prvInitialiseTaskLists+0x6c>)
 8002f66:	f7ff fb08 	bl	800257a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f6a:	480c      	ldr	r0, [pc, #48]	; (8002f9c <prvInitialiseTaskLists+0x70>)
 8002f6c:	f7ff fb05 	bl	800257a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f70:	480b      	ldr	r0, [pc, #44]	; (8002fa0 <prvInitialiseTaskLists+0x74>)
 8002f72:	f7ff fb02 	bl	800257a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <prvInitialiseTaskLists+0x78>)
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <prvInitialiseTaskLists+0x64>)
 8002f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <prvInitialiseTaskLists+0x7c>)
 8002f7e:	4a05      	ldr	r2, [pc, #20]	; (8002f94 <prvInitialiseTaskLists+0x68>)
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000348 	.word	0x20000348
 8002f90:	200003d4 	.word	0x200003d4
 8002f94:	200003e8 	.word	0x200003e8
 8002f98:	20000404 	.word	0x20000404
 8002f9c:	20000418 	.word	0x20000418
 8002fa0:	20000430 	.word	0x20000430
 8002fa4:	200003fc 	.word	0x200003fc
 8002fa8:	20000400 	.word	0x20000400

08002fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fb2:	e019      	b.n	8002fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fb4:	f000 fa0e 	bl	80033d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <prvCheckTasksWaitingTermination+0x50>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb62 	bl	800268e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <prvCheckTasksWaitingTermination+0x54>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <prvCheckTasksWaitingTermination+0x54>)
 8002fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <prvCheckTasksWaitingTermination+0x58>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <prvCheckTasksWaitingTermination+0x58>)
 8002fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fde:	f000 fa29 	bl	8003434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f810 	bl	8003008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <prvCheckTasksWaitingTermination+0x58>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e1      	bne.n	8002fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000418 	.word	0x20000418
 8003000:	20000444 	.word	0x20000444
 8003004:	2000042c 	.word	0x2000042c

08003008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	334c      	adds	r3, #76	; 0x4c
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fce5 	bl	80039e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fb81 	bl	8003730 <vPortFree>
				vPortFree( pxTCB );
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fb7e 	bl	8003730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003034:	e018      	b.n	8003068 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d103      	bne.n	8003048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fb75 	bl	8003730 <vPortFree>
	}
 8003046:	e00f      	b.n	8003068 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800304e:	2b02      	cmp	r3, #2
 8003050:	d00a      	beq.n	8003068 <prvDeleteTCB+0x60>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	60fb      	str	r3, [r7, #12]
}
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <prvDeleteTCB+0x5e>
	}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003088:	e008      	b.n	800309c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	200003fc 	.word	0x200003fc
 80030ac:	20000464 	.word	0x20000464

080030b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fae1 	bl	800268e <uxListRemove>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2201      	movs	r2, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4013      	ands	r3, r2
 80030e6:	4a20      	ldr	r2, [pc, #128]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f0:	d10a      	bne.n	8003108 <prvAddCurrentTaskToDelayedList+0x58>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4619      	mov	r1, r3
 8003100:	481a      	ldr	r0, [pc, #104]	; (800316c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003102:	f7ff fa67 	bl	80025d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003106:	e026      	b.n	8003156 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	429a      	cmp	r2, r3
 800311e:	d209      	bcs.n	8003134 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7ff fa75 	bl	800261c <vListInsert>
}
 8003132:	e010      	b.n	8003156 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7ff fa6b 	bl	800261c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d202      	bcs.n	8003156 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000448 	.word	0x20000448
 8003164:	20000344 	.word	0x20000344
 8003168:	2000044c 	.word	0x2000044c
 800316c:	20000430 	.word	0x20000430
 8003170:	20000400 	.word	0x20000400
 8003174:	200003fc 	.word	0x200003fc
 8003178:	20000464 	.word	0x20000464

0800317c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3b04      	subs	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3b04      	subs	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3b04      	subs	r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031ac:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <pxPortInitialiseStack+0x64>)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3b14      	subs	r3, #20
 80031b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3b04      	subs	r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f06f 0202 	mvn.w	r2, #2
 80031ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3b20      	subs	r3, #32
 80031d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	080031e5 	.word	0x080031e5

080031e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <prvTaskExitError+0x54>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f6:	d00a      	beq.n	800320e <prvTaskExitError+0x2a>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	60fb      	str	r3, [r7, #12]
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <prvTaskExitError+0x28>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60bb      	str	r3, [r7, #8]
}
 8003220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003222:	bf00      	nop
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0fc      	beq.n	8003224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	2000000c 	.word	0x2000000c
 800323c:	00000000 	.word	0x00000000

08003240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <pxCurrentTCBConst2>)
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	6808      	ldr	r0, [r1, #0]
 8003246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324a:	f380 8809 	msr	PSP, r0
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f380 8811 	msr	BASEPRI, r0
 800325a:	4770      	bx	lr
 800325c:	f3af 8000 	nop.w

08003260 <pxCurrentTCBConst2>:
 8003260:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <prvPortStartFirstTask+0x24>)
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	f380 8808 	msr	MSP, r0
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f380 8814 	msr	CONTROL, r0
 800327a:	b662      	cpsie	i
 800327c:	b661      	cpsie	f
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	df00      	svc	0
 8003288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800328a:	bf00      	nop
 800328c:	e000ed08 	.word	0xe000ed08

08003290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003296:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <xPortStartScheduler+0x120>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a46      	ldr	r2, [pc, #280]	; (80033b4 <xPortStartScheduler+0x124>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d10a      	bne.n	80032b6 <xPortStartScheduler+0x26>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	613b      	str	r3, [r7, #16]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032b6:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <xPortStartScheduler+0x120>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <xPortStartScheduler+0x128>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10a      	bne.n	80032d6 <xPortStartScheduler+0x46>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60fb      	str	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <xPortStartScheduler+0x12c>)
 80032d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <xPortStartScheduler+0x130>)
 80032fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <xPortStartScheduler+0x134>)
 8003300:	2207      	movs	r2, #7
 8003302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003304:	e009      	b.n	800331a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <xPortStartScheduler+0x134>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3b01      	subs	r3, #1
 800330c:	4a2d      	ldr	r2, [pc, #180]	; (80033c4 <xPortStartScheduler+0x134>)
 800330e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d0ef      	beq.n	8003306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <xPortStartScheduler+0x134>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00a      	beq.n	8003348 <xPortStartScheduler+0xb8>
	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	60bb      	str	r3, [r7, #8]
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <xPortStartScheduler+0x134>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <xPortStartScheduler+0x134>)
 8003350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <xPortStartScheduler+0x134>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <xPortStartScheduler+0x134>)
 800335c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <xPortStartScheduler+0x138>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <xPortStartScheduler+0x138>)
 800336c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <xPortStartScheduler+0x138>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <xPortStartScheduler+0x138>)
 8003378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800337c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800337e:	f000 f8dd 	bl	800353c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <xPortStartScheduler+0x13c>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003388:	f000 f8fc 	bl	8003584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <xPortStartScheduler+0x140>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <xPortStartScheduler+0x140>)
 8003392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003398:	f7ff ff66 	bl	8003268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800339c:	f7ff fd4c 	bl	8002e38 <vTaskSwitchContext>
	prvTaskExitError();
 80033a0:	f7ff ff20 	bl	80031e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00
 80033b4:	410fc271 	.word	0x410fc271
 80033b8:	410fc270 	.word	0x410fc270
 80033bc:	e000e400 	.word	0xe000e400
 80033c0:	20000470 	.word	0x20000470
 80033c4:	20000474 	.word	0x20000474
 80033c8:	e000ed20 	.word	0xe000ed20
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	e000ef34 	.word	0xe000ef34

080033d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	607b      	str	r3, [r7, #4]
}
 80033ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <vPortEnterCritical+0x58>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <vPortEnterCritical+0x58>)
 80033f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <vPortEnterCritical+0x58>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10f      	bne.n	8003420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <vPortEnterCritical+0x5c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <vPortEnterCritical+0x4c>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	603b      	str	r3, [r7, #0]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vPortEnterCritical+0x4a>
	}
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	2000000c 	.word	0x2000000c
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <vPortExitCritical+0x50>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <vPortExitCritical+0x24>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <vPortExitCritical+0x50>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <vPortExitCritical+0x50>)
 8003460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <vPortExitCritical+0x50>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <vPortExitCritical+0x42>
 800346a:	2300      	movs	r3, #0
 800346c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
	...

08003490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003490:	f3ef 8009 	mrs	r0, PSP
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <pxCurrentTCBConst>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f01e 0f10 	tst.w	lr, #16
 80034a0:	bf08      	it	eq
 80034a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034aa:	6010      	str	r0, [r2, #0]
 80034ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034b4:	f380 8811 	msr	BASEPRI, r0
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f7ff fcba 	bl	8002e38 <vTaskSwitchContext>
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f380 8811 	msr	BASEPRI, r0
 80034cc:	bc09      	pop	{r0, r3}
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	6808      	ldr	r0, [r1, #0]
 80034d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d6:	f01e 0f10 	tst.w	lr, #16
 80034da:	bf08      	it	eq
 80034dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034e0:	f380 8809 	msr	PSP, r0
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst>:
 80034f0:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	607b      	str	r3, [r7, #4]
}
 8003510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003512:	f7ff fbd9 	bl	8002cc8 <xTaskIncrementTick>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <SysTick_Handler+0x40>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f383 8811 	msr	BASEPRI, r3
}
 800352e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortSetupTimerInterrupt+0x34>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <vPortSetupTimerInterrupt+0x38>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <vPortSetupTimerInterrupt+0x3c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <vPortSetupTimerInterrupt+0x40>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <vPortSetupTimerInterrupt+0x44>)
 800355a:	3b01      	subs	r3, #1
 800355c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <vPortSetupTimerInterrupt+0x34>)
 8003560:	2207      	movs	r2, #7
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e010 	.word	0xe000e010
 8003574:	e000e018 	.word	0xe000e018
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3
 8003580:	e000e014 	.word	0xe000e014

08003584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003594 <vPortEnableVFP+0x10>
 8003588:	6801      	ldr	r1, [r0, #0]
 800358a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800358e:	6001      	str	r1, [r0, #0]
 8003590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003592:	bf00      	nop
 8003594:	e000ed88 	.word	0xe000ed88

08003598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035a4:	f7ff fae6 	bl	8002b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035a8:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <pvPortMalloc+0x180>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80035b0:	f000 f920 	bl	80037f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <pvPortMalloc+0x184>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 8093 	bne.w	80036e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01d      	beq.n	8003604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80035c8:	2208      	movs	r2, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d014      	beq.n	8003604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f023 0307 	bic.w	r3, r3, #7
 80035e0:	3308      	adds	r3, #8
 80035e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <pvPortMalloc+0x6c>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	617b      	str	r3, [r7, #20]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d06e      	beq.n	80036e8 <pvPortMalloc+0x150>
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <pvPortMalloc+0x188>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d869      	bhi.n	80036e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <pvPortMalloc+0x18c>)
 8003616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <pvPortMalloc+0x18c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800361e:	e004      	b.n	800362a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d903      	bls.n	800363c <pvPortMalloc+0xa4>
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f1      	bne.n	8003620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800363c:	4b36      	ldr	r3, [pc, #216]	; (8003718 <pvPortMalloc+0x180>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003642:	429a      	cmp	r2, r3
 8003644:	d050      	beq.n	80036e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2208      	movs	r2, #8
 800364c:	4413      	add	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	2308      	movs	r3, #8
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	429a      	cmp	r2, r3
 8003666:	d91f      	bls.n	80036a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <pvPortMalloc+0xf8>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	613b      	str	r3, [r7, #16]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad2      	subs	r2, r2, r3
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036a2:	69b8      	ldr	r0, [r7, #24]
 80036a4:	f000 f908 	bl	80038b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <pvPortMalloc+0x188>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <pvPortMalloc+0x188>)
 80036b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <pvPortMalloc+0x188>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <pvPortMalloc+0x190>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d203      	bcs.n	80036ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <pvPortMalloc+0x188>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <pvPortMalloc+0x190>)
 80036c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <pvPortMalloc+0x184>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <pvPortMalloc+0x194>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <pvPortMalloc+0x194>)
 80036e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80036e8:	f7ff fa52 	bl	8002b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <pvPortMalloc+0x174>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60fb      	str	r3, [r7, #12]
}
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <pvPortMalloc+0x172>
	return pvReturn;
 800370c:	69fb      	ldr	r3, [r7, #28]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3728      	adds	r7, #40	; 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20004080 	.word	0x20004080
 800371c:	20004094 	.word	0x20004094
 8003720:	20004084 	.word	0x20004084
 8003724:	20004078 	.word	0x20004078
 8003728:	20004088 	.word	0x20004088
 800372c:	2000408c 	.word	0x2000408c

08003730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04d      	beq.n	80037de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003742:	2308      	movs	r3, #8
 8003744:	425b      	negs	r3, r3
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4413      	add	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <vPortFree+0xb8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <vPortFree+0x44>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60fb      	str	r3, [r7, #12]
}
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <vPortFree+0x62>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60bb      	str	r3, [r7, #8]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <vPortFree+0xb8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01e      	beq.n	80037de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11a      	bne.n	80037de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <vPortFree+0xb8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80037b8:	f7ff f9dc 	bl	8002b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <vPortFree+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <vPortFree+0xbc>)
 80037c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037ca:	6938      	ldr	r0, [r7, #16]
 80037cc:	f000 f874 	bl	80038b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <vPortFree+0xc0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <vPortFree+0xc0>)
 80037d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80037da:	f7ff f9d9 	bl	8002b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20004094 	.word	0x20004094
 80037ec:	20004084 	.word	0x20004084
 80037f0:	20004090 	.word	0x20004090

080037f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80037fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <prvHeapInit+0xac>)
 8003802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3307      	adds	r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	4a1f      	ldr	r2, [pc, #124]	; (80038a0 <prvHeapInit+0xac>)
 8003824:	4413      	add	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <prvHeapInit+0xb0>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <prvHeapInit+0xb0>)
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4413      	add	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003840:	2208      	movs	r2, #8
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <prvHeapInit+0xb4>)
 8003854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <prvHeapInit+0xb4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <prvHeapInit+0xb4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <prvHeapInit+0xb4>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <prvHeapInit+0xb8>)
 8003882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <prvHeapInit+0xbc>)
 800388a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <prvHeapInit+0xc0>)
 800388e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20000478 	.word	0x20000478
 80038a4:	20004078 	.word	0x20004078
 80038a8:	20004080 	.word	0x20004080
 80038ac:	20004088 	.word	0x20004088
 80038b0:	20004084 	.word	0x20004084
 80038b4:	20004094 	.word	0x20004094

080038b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <prvInsertBlockIntoFreeList+0xac>)
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e002      	b.n	80038cc <prvInsertBlockIntoFreeList+0x14>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d8f7      	bhi.n	80038c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d108      	bne.n	80038fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	441a      	add	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d118      	bne.n	8003940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <prvInsertBlockIntoFreeList+0xb0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d00d      	beq.n	8003936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e008      	b.n	8003948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvInsertBlockIntoFreeList+0xb0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e003      	b.n	8003948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d002      	beq.n	8003956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20004078 	.word	0x20004078
 8003968:	20004080 	.word	0x20004080

0800396c <__libc_init_array>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4d0d      	ldr	r5, [pc, #52]	; (80039a4 <__libc_init_array+0x38>)
 8003970:	4c0d      	ldr	r4, [pc, #52]	; (80039a8 <__libc_init_array+0x3c>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	2600      	movs	r6, #0
 8003978:	42a6      	cmp	r6, r4
 800397a:	d109      	bne.n	8003990 <__libc_init_array+0x24>
 800397c:	4d0b      	ldr	r5, [pc, #44]	; (80039ac <__libc_init_array+0x40>)
 800397e:	4c0c      	ldr	r4, [pc, #48]	; (80039b0 <__libc_init_array+0x44>)
 8003980:	f000 f8e8 	bl	8003b54 <_init>
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	2600      	movs	r6, #0
 800398a:	42a6      	cmp	r6, r4
 800398c:	d105      	bne.n	800399a <__libc_init_array+0x2e>
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	f855 3b04 	ldr.w	r3, [r5], #4
 8003994:	4798      	blx	r3
 8003996:	3601      	adds	r6, #1
 8003998:	e7ee      	b.n	8003978 <__libc_init_array+0xc>
 800399a:	f855 3b04 	ldr.w	r3, [r5], #4
 800399e:	4798      	blx	r3
 80039a0:	3601      	adds	r6, #1
 80039a2:	e7f2      	b.n	800398a <__libc_init_array+0x1e>
 80039a4:	08003cc4 	.word	0x08003cc4
 80039a8:	08003cc4 	.word	0x08003cc4
 80039ac:	08003cc4 	.word	0x08003cc4
 80039b0:	08003cc8 	.word	0x08003cc8

080039b4 <__retarget_lock_acquire_recursive>:
 80039b4:	4770      	bx	lr

080039b6 <__retarget_lock_release_recursive>:
 80039b6:	4770      	bx	lr

080039b8 <memset>:
 80039b8:	4402      	add	r2, r0
 80039ba:	4603      	mov	r3, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	d100      	bne.n	80039c2 <memset+0xa>
 80039c0:	4770      	bx	lr
 80039c2:	f803 1b01 	strb.w	r1, [r3], #1
 80039c6:	e7f9      	b.n	80039bc <memset+0x4>

080039c8 <cleanup_glue>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	460c      	mov	r4, r1
 80039cc:	6809      	ldr	r1, [r1, #0]
 80039ce:	4605      	mov	r5, r0
 80039d0:	b109      	cbz	r1, 80039d6 <cleanup_glue+0xe>
 80039d2:	f7ff fff9 	bl	80039c8 <cleanup_glue>
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
 80039da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039de:	f000 b869 	b.w	8003ab4 <_free_r>
	...

080039e4 <_reclaim_reent>:
 80039e4:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <_reclaim_reent+0xb4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4283      	cmp	r3, r0
 80039ea:	b570      	push	{r4, r5, r6, lr}
 80039ec:	4604      	mov	r4, r0
 80039ee:	d051      	beq.n	8003a94 <_reclaim_reent+0xb0>
 80039f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039f2:	b143      	cbz	r3, 8003a06 <_reclaim_reent+0x22>
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d14a      	bne.n	8003a90 <_reclaim_reent+0xac>
 80039fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	b111      	cbz	r1, 8003a06 <_reclaim_reent+0x22>
 8003a00:	4620      	mov	r0, r4
 8003a02:	f000 f857 	bl	8003ab4 <_free_r>
 8003a06:	6961      	ldr	r1, [r4, #20]
 8003a08:	b111      	cbz	r1, 8003a10 <_reclaim_reent+0x2c>
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f000 f852 	bl	8003ab4 <_free_r>
 8003a10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a12:	b111      	cbz	r1, 8003a1a <_reclaim_reent+0x36>
 8003a14:	4620      	mov	r0, r4
 8003a16:	f000 f84d 	bl	8003ab4 <_free_r>
 8003a1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a1c:	b111      	cbz	r1, 8003a24 <_reclaim_reent+0x40>
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 f848 	bl	8003ab4 <_free_r>
 8003a24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003a26:	b111      	cbz	r1, 8003a2e <_reclaim_reent+0x4a>
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 f843 	bl	8003ab4 <_free_r>
 8003a2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003a30:	b111      	cbz	r1, 8003a38 <_reclaim_reent+0x54>
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 f83e 	bl	8003ab4 <_free_r>
 8003a38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003a3a:	b111      	cbz	r1, 8003a42 <_reclaim_reent+0x5e>
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f000 f839 	bl	8003ab4 <_free_r>
 8003a42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a44:	b111      	cbz	r1, 8003a4c <_reclaim_reent+0x68>
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 f834 	bl	8003ab4 <_free_r>
 8003a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a4e:	b111      	cbz	r1, 8003a56 <_reclaim_reent+0x72>
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 f82f 	bl	8003ab4 <_free_r>
 8003a56:	69a3      	ldr	r3, [r4, #24]
 8003a58:	b1e3      	cbz	r3, 8003a94 <_reclaim_reent+0xb0>
 8003a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	4798      	blx	r3
 8003a60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003a62:	b1b9      	cbz	r1, 8003a94 <_reclaim_reent+0xb0>
 8003a64:	4620      	mov	r0, r4
 8003a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a6a:	f7ff bfad 	b.w	80039c8 <cleanup_glue>
 8003a6e:	5949      	ldr	r1, [r1, r5]
 8003a70:	b941      	cbnz	r1, 8003a84 <_reclaim_reent+0xa0>
 8003a72:	3504      	adds	r5, #4
 8003a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a76:	2d80      	cmp	r5, #128	; 0x80
 8003a78:	68d9      	ldr	r1, [r3, #12]
 8003a7a:	d1f8      	bne.n	8003a6e <_reclaim_reent+0x8a>
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f000 f819 	bl	8003ab4 <_free_r>
 8003a82:	e7ba      	b.n	80039fa <_reclaim_reent+0x16>
 8003a84:	680e      	ldr	r6, [r1, #0]
 8003a86:	4620      	mov	r0, r4
 8003a88:	f000 f814 	bl	8003ab4 <_free_r>
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	e7ef      	b.n	8003a70 <_reclaim_reent+0x8c>
 8003a90:	2500      	movs	r5, #0
 8003a92:	e7ef      	b.n	8003a74 <_reclaim_reent+0x90>
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	bf00      	nop
 8003a98:	20000010 	.word	0x20000010

08003a9c <__malloc_lock>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__malloc_lock+0x8>)
 8003a9e:	f7ff bf89 	b.w	80039b4 <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20004140 	.word	0x20004140

08003aa8 <__malloc_unlock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__malloc_unlock+0x8>)
 8003aaa:	f7ff bf84 	b.w	80039b6 <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	20004140 	.word	0x20004140

08003ab4 <_free_r>:
 8003ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	d048      	beq.n	8003b4c <_free_r+0x98>
 8003aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003abe:	9001      	str	r0, [sp, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ac6:	bfb8      	it	lt
 8003ac8:	18e4      	addlt	r4, r4, r3
 8003aca:	f7ff ffe7 	bl	8003a9c <__malloc_lock>
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <_free_r+0x9c>)
 8003ad0:	9801      	ldr	r0, [sp, #4]
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	4615      	mov	r5, r2
 8003ad6:	b933      	cbnz	r3, 8003ae6 <_free_r+0x32>
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6014      	str	r4, [r2, #0]
 8003adc:	b003      	add	sp, #12
 8003ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ae2:	f7ff bfe1 	b.w	8003aa8 <__malloc_unlock>
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	d90b      	bls.n	8003b02 <_free_r+0x4e>
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	1862      	adds	r2, r4, r1
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bf04      	itt	eq
 8003af2:	681a      	ldreq	r2, [r3, #0]
 8003af4:	685b      	ldreq	r3, [r3, #4]
 8003af6:	6063      	str	r3, [r4, #4]
 8003af8:	bf04      	itt	eq
 8003afa:	1852      	addeq	r2, r2, r1
 8003afc:	6022      	streq	r2, [r4, #0]
 8003afe:	602c      	str	r4, [r5, #0]
 8003b00:	e7ec      	b.n	8003adc <_free_r+0x28>
 8003b02:	461a      	mov	r2, r3
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b10b      	cbz	r3, 8003b0c <_free_r+0x58>
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d9fa      	bls.n	8003b02 <_free_r+0x4e>
 8003b0c:	6811      	ldr	r1, [r2, #0]
 8003b0e:	1855      	adds	r5, r2, r1
 8003b10:	42a5      	cmp	r5, r4
 8003b12:	d10b      	bne.n	8003b2c <_free_r+0x78>
 8003b14:	6824      	ldr	r4, [r4, #0]
 8003b16:	4421      	add	r1, r4
 8003b18:	1854      	adds	r4, r2, r1
 8003b1a:	42a3      	cmp	r3, r4
 8003b1c:	6011      	str	r1, [r2, #0]
 8003b1e:	d1dd      	bne.n	8003adc <_free_r+0x28>
 8003b20:	681c      	ldr	r4, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	6053      	str	r3, [r2, #4]
 8003b26:	4421      	add	r1, r4
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	e7d7      	b.n	8003adc <_free_r+0x28>
 8003b2c:	d902      	bls.n	8003b34 <_free_r+0x80>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	6003      	str	r3, [r0, #0]
 8003b32:	e7d3      	b.n	8003adc <_free_r+0x28>
 8003b34:	6825      	ldr	r5, [r4, #0]
 8003b36:	1961      	adds	r1, r4, r5
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	bf04      	itt	eq
 8003b3c:	6819      	ldreq	r1, [r3, #0]
 8003b3e:	685b      	ldreq	r3, [r3, #4]
 8003b40:	6063      	str	r3, [r4, #4]
 8003b42:	bf04      	itt	eq
 8003b44:	1949      	addeq	r1, r1, r5
 8003b46:	6021      	streq	r1, [r4, #0]
 8003b48:	6054      	str	r4, [r2, #4]
 8003b4a:	e7c7      	b.n	8003adc <_free_r+0x28>
 8003b4c:	b003      	add	sp, #12
 8003b4e:	bd30      	pop	{r4, r5, pc}
 8003b50:	20004098 	.word	0x20004098

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
